{"version":3,"sources":["../src/marker.js"],"names":[],"mappings":";;;;;QAwBgB,a,GAAA,a;QAkBA,S,GAAA,S;QAeA,gB,GAAA,gB;QAuBA,U,GAAA,U;QAKA,a,GAAA,a;;;;;;;;;;;;;;;AAvEhB,IAAM,cAAc,oBAApB;AACA,IAAM,eAAe,UAArB;AACA,IAAM,UAAU,SAAhB,C;AACA,IAAM,SAAS,QAAf,C;AACA,IAAM,YAAY,MAAlB,C;AACA,IAAM,mBAAmB,yBAAzB,C;;;;;AAKO,SAAS,aAAT,CAAuB,KAAvB,EAA8B;;AAEjC,QAAM,SAAS,0BAA0B,gBAA1B,GAA6C,aAA5D;AACA,QAAM,MAAM,IAAI,MAAJ,CAAW,MAAX,CAAZ;AACA,QAAM,MAAM,MAAM,KAAN,CAAY,GAAZ,CAAZ;;AAEA,WAAO,MAAM,IAAI,CAAJ,CAAN,GAAe,EAAtB;AACH;;;;;;;;;;AAWM,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC7B,QAAM,SAAS,cAAc,KAAd,CAAf;AACA,WAAQ,WAAW,EAAnB;AACH;;;;;;;;;;;;AAYM,SAAS,gBAAT,CAA0B,IAA1B,EAAgC,UAAhC,EAA4C;AAC/C,QAAI,eAAe,SAAnB,EAA8B;AAC1B,eAAO,IAAP;AACH;;AAED,QAAM,SAAS,QAAQ,UAAR,GAAqB,KAApC;AACA,QAAM,UAAU,QAAQ,SAAR,GAAoB,WAApB,GAAkC,OAAlC,GAA4C,MAA5C,GAAqD,MAArD,GACV,MADU,GACD,YADC,GACc,MAD9B;;AAGA,QAAM,SAAS,UAAU,iBAAV,GAA8B,OAA7C;AACA,QAAM,MAAM,IAAI,MAAJ,CAAW,MAAX,CAAZ;AACA,QAAM,MAAM,KAAK,KAAL,CAAW,GAAX,CAAZ;;AAEA,QAAI,GAAJ,EAAS;AACL,eAAO,IAAI,CAAJ,CAAP,C;AACH,KAFD,MAEO;AACH,oBAAQ,IAAR,CAAa,iCAAiC,UAAjC,GAA8C,aAA3D;AACA,mBAAO,oBAAoB,UAApB,GAAiC,aAAxC;AACH;AACJ;;;AAIM,SAAS,UAAT,CAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC;AACtC,WAAO,IAAI,OAAJ,CAAY,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAZ,EAAkC,GAAlC,CAAP;AACH;;;AAGM,SAAS,aAAT,CAAuB,IAAvB,EAA6B;;AAEhC,QAAM,SAAS,QAAQ,gBAAR,GAA2B,KAA1C;AACA,QAAM,UAAU,YAAY,WAAZ,GAA0B,OAA1B,GAAoC,MAApC,GAA6C,MAA7C,GACV,MADU,GACD,YADC,GACc,MAD9B;;AAGA,WAAO,WAAW,IAAX,EAAiB,OAAjB,EAA0B,EAA1B,CAAP;AACH","file":"marker.js","sourcesContent":["// LICENSE : MIT\n/*\n * Feature: doxygen like snippet code.\n * For code source documenting, see\n * https://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdsnippet\n *\n * Gibook usage:\n *\n *      [import:<markername>](path/to/file)\n *\n * NB: markername must begin with a letter to avoid conflict with slice\n *     line range.\n */\n\nconst commentOpen = \"(\\/+\\/+|#|%|\\/\\\\*)\";\nconst commentClose = \"(\\\\*\\/)?\";\nconst doxChar = \"[\\*!\\/]\"; // doxygen documentation character\nconst spaces = \"[ \\t]*\"; // h spaces\nconst spacesAny = \"\\\\s*\"; // h+v spaces\nconst markerNameFormat = \"(\\\\s*[a-zA-Z][\\\\w\\\\s]*)\"; // Must contain a char.\n\n/*\n * format: [import:<markername>](path/to/file)\n */\nexport function getMarkerName(label) {\n    // regex\n    const regstr = \"\\^(?:include|import):\" + markerNameFormat + \"[,\\\\s]?.*\\$\";\n    const reg = new RegExp(regstr);\n    const res = label.match(reg);\n\n    return res ? res[1] : '';\n}\n\n\n/**\n * format: [import:<markername>](path/to/file)\n * check if the import filled has a markername.\n * @example:\n *      hasMarker(label)\n * @param {string} label\n * @returns {boolean}\n */\nexport function hasMarker(label) {\n    const marker = getMarkerName(label);\n    return (marker !== '');\n}\n\n/* Parse the code from given markers\n *\n * see test/marker-test.js\n */\n/**\n * get sliced code by {@link markername}\n * @param {string} code\n * @param {string} markername\n * @returns {string}\n */\nexport function markersSliceCode(code, markername) {\n    if (markername === undefined) {\n        return code;\n    }\n    // regex\n    const balise = \"\\\\[\" + markername + \"\\\\]\";\n    const pattern = \"\\\\n\" + spacesAny + commentOpen + doxChar + spaces + balise\n        + spaces + commentClose + spaces;\n\n    const regstr = pattern + \"\\\\n*([\\\\s\\\\S]*)\" + pattern;\n    const reg = new RegExp(regstr);\n    const res = code.match(reg);\n\n    if (res) {\n        return res[3]; // count parenthesis in pattern.\n    } else {\n        console.warn('markersSliceCode(): marker `' + markername + '` not found');\n        return 'Error: marker `' + markername + '` not found'\n    }\n}\n\n\n// Replace all regex occurence by sub in the string str,\nexport function replaceAll(str, reg, sub) {\n    return str.replace(new RegExp(reg, 'g'), sub);\n}\n\n// Function that remove all markers in the given code\nexport function removeMarkers(code) {\n    // various language comment\n    const balise = \"\\\\[\" + markerNameFormat + \"\\\\]\";\n    const pattern = spacesAny + commentOpen + doxChar + spaces + balise\n        + spaces + commentClose + spaces;\n\n    return replaceAll(code, pattern, '')\n}\n"]}