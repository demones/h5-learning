// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.splitLabelToCommands = splitLabelToCommands;
exports.containIncludeCommand = containIncludeCommand;
exports.embedCode = embedCode;
exports.generateEmbedCode = generateEmbedCode;
exports.parse = parse;

var _languageDetection = require("./language-detection");

var _marker = require("./marker");

var _slicer = require("./slicer");

var fs = require("fs");
var path = require("path");

var markdownLinkFormatRegExp = /\[([^\]]*?)\]\(([^\)]*?)\)/gm;
/**
 * split label to commands
 * @param {string} label
 * @returns {Array}
 */
function splitLabelToCommands() {
    var label = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

    var result = label.split(/(:|[,\s])/);
    if (!result) {
        return [];
    }
    // remove null command
    return result.map(function (command) {
        return command.trim();
    }).filter(function (command) {
        return command.length > 0;
    });
}
/**
 * if contain "include" or "import" command, then return true
 * @param {Array} commands
 * @returns {boolean}
 */
function containIncludeCommand() {
    var commands = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    var reg = /^(include|import)$/;
    return commands.some(function (command) {
        return reg.test(command.trim());
    });
}

/**
 * generate code with options
 * @param {string} lang
 * @param {string} filePath
 * @param {string} originalPath
 * @param {string} label
 */
function embedCode(_ref) {
    var lang = _ref.lang;
    var filePath = _ref.filePath;
    var originalPath = _ref.originalPath;
    var label = _ref.label;

    var code = fs.readFileSync(filePath, "utf-8");
    var fileName = path.basename(filePath);
    if ((0, _slicer.hasSliceRange)(label)) {
        var _getSliceRange = (0, _slicer.getSliceRange)(label);

        var _getSliceRange2 = _slicedToArray(_getSliceRange, 2);

        var start = _getSliceRange2[0];
        var end = _getSliceRange2[1];

        var content = (0, _slicer.sliceCode)(code, start, end);
        return generateEmbedCode(lang, fileName, originalPath, content);
    } else if ((0, _marker.hasMarker)(label)) {
        var marker = (0, _marker.getMarkerName)(label);
        var _content = (0, _marker.removeMarkers)((0, _marker.markersSliceCode)(code, marker));
        return generateEmbedCode(lang, fileName, originalPath, _content);
    } else {
        return generateEmbedCode(lang, fileName, originalPath, code);
    }
}

function generateEmbedCode(lang, fileName, originalPath, content) {
    return "> <a name=\"" + fileName + "\" href=\"" + originalPath + "\">" + fileName + "</a>\n\n``` " + lang + "\n" + content + "\n```";
}

function parse(content, baseDir) {
    var results = [];
    var res = void 0;
    while (res = markdownLinkFormatRegExp.exec(content)) {
        var _res = res;

        var _res2 = _slicedToArray(_res, 3);

        var all = _res2[0];
        var label = _res2[1];
        var originalPath = _res2[2];

        var commands = splitLabelToCommands(label);
        if (containIncludeCommand(commands)) {
            var lang = (0, _languageDetection.getLang)(commands, originalPath);
            var absolutePath = path.resolve(baseDir, originalPath);
            var replacedContent = embedCode({
                lang: lang,
                filePath: absolutePath,
                originalPath: originalPath,
                label: label
            });
            results.push({
                target: all,
                replaced: replacedContent
            });
        }
    }
    return results;
}
//# sourceMappingURL=parser.js.map