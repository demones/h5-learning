{"version":3,"sources":["../src/parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nimport {getLang} from \"./language-detection\";\nimport {getMarkerName, hasMarker, markersSliceCode, removeMarkers} from \"./marker\";\nimport {sliceCode, hasSliceRange, getSliceRange} from \"./slicer\";\nconst markdownLinkFormatRegExp = /\\[([^\\]]*?)\\]\\(([^\\)]*?)\\)/gm;\n/**\n * split label to commands\n * @param {string} label\n * @returns {Array}\n */\nexport function splitLabelToCommands(label = \"\") {\n    const result = label.split(/(:|[,\\s])/);\n    if (!result) {\n        return [];\n    }\n    // remove null command\n    return result.map(command => {\n        return command.trim();\n    }).filter(command => {\n        return command.length > 0;\n    });\n}\n/**\n * if contain \"include\" or \"import\" command, then return true\n * @param {Array} commands\n * @returns {boolean}\n */\nexport function containIncludeCommand(commands = []) {\n    var reg = /^(include|import)$/;\n    return commands.some(command => {\n        return reg.test(command.trim());\n    })\n}\n\n/**\n * generate code with options\n * @param {string} lang\n * @param {string} filePath\n * @param {string} originalPath\n * @param {string} label\n */\nexport function embedCode({lang, filePath, originalPath, label}) {\n    const code = fs.readFileSync(filePath, \"utf-8\");\n    const fileName = path.basename(filePath);\n    if (hasSliceRange(label)) {\n        const [start, end] = getSliceRange(label);\n        const content = sliceCode(code, start, end);\n        return generateEmbedCode(lang, fileName, originalPath, content);\n    } else if (hasMarker(label)) {\n        const marker = getMarkerName(label);\n        const content = removeMarkers(markersSliceCode(code, marker));\n        return generateEmbedCode(lang, fileName, originalPath, content);\n    } else {\n        return generateEmbedCode(lang, fileName, originalPath, code);\n    }\n}\n\nexport function generateEmbedCode(lang, fileName, originalPath, content) {\n    return `> <a name=\"${fileName}\" href=\"${originalPath}\">${fileName}</a>\n\n\\`\\`\\` ${lang}\n${content}\n\\`\\`\\``\n}\n\nexport function parse(content, baseDir) {\n    const results = [];\n    let res;\n    while (res = markdownLinkFormatRegExp.exec(content)) {\n        const [all, label, originalPath] = res;\n        const commands = splitLabelToCommands(label);\n        if (containIncludeCommand(commands)) {\n            const lang = getLang(commands, originalPath);\n            const absolutePath = path.resolve(baseDir, originalPath);\n            const replacedContent = embedCode({\n                lang,\n                filePath: absolutePath,\n                originalPath: originalPath,\n                label\n            });\n            results.push({\n                target: all,\n                replaced: replacedContent\n            });\n        }\n    }\n    return results;\n}\n"]}