{"./":{"url":"./","title":"Introduction","keywords":"","body":"web 前端学习笔记 ======= This book help us to quickly build web front-end page. It contain html5 css3 javascript and the front-end technology for web etc. 开发与部署 安装 gitbook-cli npm install -g gitbook-cli 安装依赖 gitbook install 启动服务 gitbook serve 打包编译 gitbook build Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2019-02-14 15:58:37 "},"css3/":{"url":"css3/","title":"css3","keywords":"","body":"css3 css3 相关知识点整理 工具 在线补齐前缀 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/flex/":{"url":"css3/flex/","title":"Flex 布局详解","keywords":"","body":"Flexbox 布局详解 2009年，W3C提出了一种新的方案----Flex布局，可以简便、完整、响应式地实现各种页面布局。 目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。 以下介绍是基于2015年5月份提供的最新草案，最后会给出对旧的浏览器兼容性实现 什么是 Flexbox 布局 Flexbox布局官方称之为CSS Flexible Box布局模块,他是CSS3中的一种新的布局模式。 Flexbox可以控制未知容器元素的对齐方式，排列方向，排列顺序等，甚至是在未知大小的容器也能这样做。 Flex容器的主要特点是能够修改其子元素（Flex item）的宽度或高度，使其在不同的屏幕尺寸中填补可用的空间。 许多设计人员和开发人员发现使用Flexbox来布局更容易，可以使用更少的代码，更简单的方式实现更复杂的布局，也使整个开发过程更为简单。 Flexbox布局算法基于水平或垂直的块或行内元素来布局。Flexbox布局常用于小的应用程序组件之中。 注意，设为Flex布局以后，子元素的 float、clear和vertical-align属性将失效。 使用Flexbox布局只要在父容器元素上设置display属性即可 .flex-container { display: -webkit-flex; /* Safari */ display: flex; } 如果你想将其设置为一个内联元素，可以像下面这样使用 .flex-container { display: -webkit-inline-flex; /* Safari */ display: inline-flex; } 参考资料 终极Flexbox属性查询列表 一个完整的Flexbox指南 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/flex/container.html":{"url":"css3/flex/container.html","title":"Flex 布局容器属性","keywords":"","body":"Flexbox 容器属性 Flexbox 容器属性主要有以下六个属性 flex-direction 设置flex容器的主轴方向 flex-wrap 设置一行或多行布局 flex-flow 是flex-direction属性和flex-wrap属性的简写形式 justify-content 子元素主轴方向对齐方式 align-items 子元素侧轴方向对齐方式 align-content 多行侧轴方向对齐方式 flex-direction 这个属性主要设置flex容器的主轴方向，指定flex子元素在flex容器中的排列方式。flex容器的主轴方向主要有水平和纵向两种。 .flex-container { -webkit-flex-direction: row | row-reverse | column | column-reverse; /* Safari */ flex-direction: row | row-reverse | column | column-reverse; } 他有4个值 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 示例 从左向右排列 1 2 3 从右向左排列 1 2 3 从上向下排列 1 2 3 从下向上排列 1 2 3 注意：row和row-reverse依赖其写作模式，如果在rtl上下文方式下，他们都将分别被逆转。 flex-wrap flex项目在flex容器中默认是只显示一行。如果希望控制flex项目在flex容器中按一行或多行排列，可以使用flex-wrap属性。 .flex-container{ -webkit-flex-flow: nowrap | wrap | wrap-reverse; /* Safari */ flex-wrap: nowrap | wrap | wrap-reverse; } 他有三个值 nowrap（默认）：不换行。Flex子元素在flex容器中显示成一行，flex子元素会自动缩减来适应flex容器的宽度。 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方。 示例 不换行 nowrap 1 2 3 4 换行 wrap 1 2 3 4 换行 wrap 第一行在下方 1 2 3 4 注意： 这些属性依赖于水平排列模式，在rtl上下文背景下，他们将分别被逆转。 flex-flow flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap .flex-container { -webkit-flex-flow: || ; /* Safari */ flex-flow: || ; } justify-content justify-content属性定义了项目在主轴上的对齐方式。 .flex-container { -webkit-justify-content: flex-start | flex-end | center | space-between | space-around; /* Safari */ justify-content: flex-start | flex-end | center | space-between | space-around; } 他有5 个属性值（以下说明和示例是在ltr上下文方式下） flex-start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，子元素之间的间隔相等，第一个和最后一个flex子元素向flex容器的边缘对齐。 space-around：平均分布，Flex子元素前后相等的空间显示在flex容器中。所以，子元素之间的间隔会比子元素与边框的间隔大一倍。 示例 左对齐 flex-start 1 2 3 4 右对齐 flex-end 1 2 3 4 居中 center 1 2 3 4 两端对齐 space-between 1 2 3 4 平均分布 space-around 1 2 3 4 align-items Flex子元素在容器侧轴对齐方式，类似于justify-content，只不过不是水平方向，而是纵向。 这个属性可以设置所有flex子元素对齐方式，并且包括匿名元素。 .flex-container { -webkit-align-items: flex-start | flex-end | center | baseline | stretch; /* Safari */ align-items: flex-start | flex-end | center | baseline | stretch;; } 他有 5 个属性值，以下假定侧轴是从上往下 flex-start：侧轴的起点对齐。 flex-end：侧轴的终点对齐。 center：侧轴的中点对齐，即垂直居中 baseline: 按照子元素第一行文字的基线对齐。 stretch（默认值）：如果子元素未设置高度或设为auto，Flex子元素沿着flex容器侧轴方向填满整个flex容器高度 如果侧轴是从左向右，则应该是指宽度。注意如果设置了高度或宽度，将不会被填满整个容器 示例 侧轴的起点对齐 flex-start 1 2 3 4 侧轴的终点对齐 flex-end 1 2 3 4 侧轴的中点对齐 center 1 2 3 4 按照子元素第一行文字的基线对齐 baseline 1 2 3 41333333 填满容器 stretch 1 2 3 4 align-content align-content 属性是指flex容器内的每行在flex容器中侧轴排列方式，类似于justify-content在主轴方向单个Flex子元素对齐方式。 注意：这个属性只有当flex容器有多行时，flex子元素才生效，如果flex容器只有一行，这个属性没有效果。 所以需要设置 flex-wrap: wrap; 或 flex-wrap: wrap-reverse; .flex-container { -webkit-align-content: flex-start | flex-end | center | space-between | space-around | stretch; /* Safari */ align-content: flex-start | flex-end | center | space-between | space-around | stretch; } 该属性有6个属性值 flex-start：与侧轴的起点对齐。 flex-end：与侧轴的终点对齐。 center：与侧轴的中点对齐。 space-between：与侧轴两端对齐，轴线之间的间隔平均分布。 space-around：侧轴每行平均分布，轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：侧轴各行占满整个侧轴线。如果子元素未设置高度或设为auto，Flex子元素会沿着flex容器侧轴方向填满整个flex容器高度； 如果设置高度，则每行按实际高度显示，并且多行会占满整个容器。需要说明一下侧轴是从左向右，则应该是指宽度；侧轴从上向下，则应该是指高度 示例 与侧轴的起点对齐 flex-start 1 2 3 4 与侧轴的终点对齐 flex-end 1 2 3 4 与侧轴的中点对齐 center 1 2 3 4 与侧轴两端对齐 space-between 1 2 3 4 每行平均分布 space-around 1 2 3 4 各行占满整个侧轴线 stretch 1 2 3 4 Flexbox容器无效属性 所有column-*属性在flex容器上都不生效 flex容器上不能使用::first-line和::first-letter伪元素 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/flex/subelement.html":{"url":"css3/flex/subelement.html","title":"Flex 布局子元素属性","keywords":"","body":"Flexbox 子元素属性 Flexbox 布局用在子元素上的属性有以下6个 order 属性是用来控制flex容器中flex子元素的排列顺序。默认情况下flex子元素在flex容器的顺序是按flex子元素出现的顺序排列的。 属性值为数值，数值越小，排列越靠前，默认为0。 flex-grow 这个属性用来指定 flex子元素放大比例 flex-shrink 定义了子元素的缩小比例 flex-basis 属性定义了在分配多余空间之前，子元素占据的主轴空间（main size） flex 属性flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 order 属性是用来控制flex容器中flex子元素的排列顺序。默认情况下flex子元素在flex容器的顺序是按flex子元素出现的顺序排列的。 属性值为数值，数值越小，排列越靠前，默认为0。Flex子元素可以使用这个简单的属性来排序，而不需要重新修改HTML代码。 .flex-item { -webkit-order: ; /* Safari */ order: ; } 示例 order:10 order:3 order:-4 order:7 flex-grow 这个属性用来指定 flex子元素放大比例，所有参与的子元素会根据 flex-grow 计算出对应的百分比来填充整个容器。 默认为0，如果有的子元素没有设置，即取默认值，则该子元素的宽度为其实际宽度。 如果所有flex子元素的flex-grow值相同，那么flex子元素在flex容器中具有相同的尺寸。 注意：负数无效。 .flex-item { -webkit-flex-grow: ; /* Safari */ flex-grow: ; } 示例 1 2 3 4 flex-shrink flex-shrink属性定义了子元素的缩小比例，即如果空间不足，该子元素将缩小。数值越大，缩小越多。默认值为1。 如果设为0，则不缩放 如果所有子元素的flex-shrink属性都设为一样的值（0除外），当空间不足时，都将等比例缩小。 如果其中的部分子元素 flex-shrink属性为0，其他子元素都为1，则父容器空间不足时，属性值为0的子元素不缩小。 如果子元素的属性值部分或全部为0时，当父容器空间不足时，会溢出 负值对该属性无效。 .flex-item { -webkit-flex-shrink: ; /* Safari */ flex-shrink: ; } 示例 flex-shrink:0 flex-shrink:1 flex-shrink:2 flex-shrink:3 flex-basis flex-basis属性定义了在分配多余空间之前，子元素占据的主轴空间（main size）。 浏览器根据这个属性，计算主轴是否有多余空间，尽量大的填充该属性值，比如设为300px; 如果除去其他子元素后有大于等于300px 的空间， 则该子元素在主轴上为300px。如果除去其他子元素后有小于300px 的空间，则按父容器减去其他子元素主轴大小后的空间来设置。它的默认值为auto，即子元素的本来大小。 该属性用来指定其中某一子元素固定高度或宽度非常实用，如果空间大，按指定的大小来显示，如果空间小，则用剩余的空间大小来填充。 该属性值可以设为跟width或height属性一样的值（比如350px），主轴为水平指宽度，主轴为垂直指高度 .flex-item { -webkit-flex-basis: auto | ; /* Safari */ flex-basis: auto | ; } 示例 1 2 3 4 flex flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 W3C鼓励使用简写方式，而不是单独写三个分离的属性，因为浏览器会推算相关值。 .flex-item { -webkit-flex: none | auto | [ ? || ]; /* Safari */ flex: none | auto | [ ? || ]; } align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。 默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 .flex-item { -webkit-align-self: auto | flex-start | flex-end | center | baseline | stretch; /* Safari */ align-self: auto | flex-start | flex-end | center | baseline | stretch; } 示例 1 2 3 4 flex子元素无效属性 float，clear和vertical-align属性应用在flex子元素上将会无效 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/flex/compatibility.html":{"url":"css3/flex/compatibility.html","title":"Flex 布局兼容性","keywords":"","body":"兼容型 概述 从2009年提出的最初草案开始，Flexbox布局经历了多次的迭代和几个语法版本的变更。详细可以参考官方说明 CSS Flexible Box布局模块 浏览器对最新flexbox规范的支持情况为： Chrome 29+ Firefox 28+ Internet Explorer 11 Opera 17+ Safari 6.1+ (prefixed with -webkit-) Android 4.4+ iOS 7.1+ (prefixed with -webkit-) 更多关于 flexbox 兼容型可以从 Can I Use 中查看 http://caniuse.com/#feat=flexbox 参考文章 关于新旧浏览器兼容型写法，可以参考以下文章 使用Flexbox：新旧语法混用实现最佳浏览器兼容 “老”的Flexbox和“新”的Flexbox 时下Web App中的Flexbox应用 探索Flexbox 一个完整的Flexbox指南 该文章介绍的比较全面 flewbox bug 整理 Flewbox 相关文章 Flexbox 非常容易 制作 CSS 布局 Flex弹性布局在移动设备上的应用 Flexbox 非常容易 制作 CSS 布局 兼容性写法例子 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .direction-row { -webkit-flex-direction: row; /* Safari */ flex-direction: row; } .direction-row-reverse { /***兼容性写法***/ -moz-box-direction:reverse; /* Firefox */ -webkit-box-direction:reverse; /* Safari、Opera 以及 Chrome */ box-direction:reverse; -webkit-flex-direction: row-reverse; flex-direction: row-reverse; } .direction-column { /***兼容性写法***/ -moz-box-orient:vertical; /* Firefox */ -webkit-box-orient:vertical; /* Safari、Opera 以及 Chrome */ box-orient:vertical; -webkit-flex-direction: column; /* Safari */ flex-direction: column; } .direction-column-reverse { /***兼容性写法***/ -moz-box-orient:vertical; /* Firefox */ -webkit-box-orient:vertical; /* Safari、Opera 以及 Chrome */ box-orient:vertical; -moz-box-direction:reverse; /* Firefox */ -webkit-box-direction:reverse; /* Safari、Opera 以及 Chrome */ box-direction:reverse; -webkit-flex-direction: column-reverse; /* Safari */ flex-direction: column-reverse; } .flex-start{ /*老版本语法*/ -webkit-box-pack: start; -moz-box-pack: start; /*混合版本语法*/ -ms-flex-pack: start; /*新版本语法*/ -webkit-justify-content: flex-start; /* Safari */ justify-content: flex-start; } .flex-center { /*老版本语法*/ -webkit-box-pack: center; -moz-box-pack: center; /*混合版本语法*/ -ms-flex-pack: center; /*新版本语法*/ -webkit-justify-content: center; /* Safari */ justify-content: center; } .flex-end{ /*老版本语法*/ -webkit-box-pack: end; -moz-box-pack: end; /*混合版本语法*/ -ms-flex-pack: end; /*新版本语法*/ -webkit-justify-content: flex-end; /* Safari */ justify-content: flex-end; } .flex-space-between{ /*老版本语法*/ -webkit-box-pack: justify; -moz-box-pack: justify; /*混合版本语法*/ -ms-flex-pack: justify; /*新版本语法*/ -webkit-justify-content: space-between; /* Safari */ justify-content: space-between; } .flex-space-around{ /*混合版本语法*/ -ms-flex-pack: distribute; /*新版本语法*/ -webkit-justify-content: space-around; /* Safari */ justify-content: space-around; } .align-items-start { /*老版本语法*/ -webkit-box-align: start; -moz-box-align: start; /*混合版本语法*/ -ms-flex-align: start; /*新版本语法*/ -webkit-align-items: flex-start; /* Safari */ align-items: flex-start; } .align-items-end { /*老版本语法*/ -webkit-box-align: end; -moz-box-align: end; /*混合版本语法*/ -ms-flex-align: end; /*新版本语法*/ -webkit-align-items: flex-end; /* Safari */ align-items: flex-end; } .align-items-center { /*老版本语法*/ -webkit-box-align: center; -moz-box-align: center; /*混合版本语法*/ -ms-flex-align: center; /*新版本语法*/ -webkit-align-items: center; /* Safari */ align-items: center; } .align-items-baseline { /*老版本语法*/ -webkit-box-align: baseline; -moz-box-align: baseline; /*混合版本语法*/ -ms-flex-align: baseline; /*新版本语法*/ -webkit-align-items: baseline; /* Safari */ align-items: baseline; } .align-items-stretch { /*老版本语法*/ -webkit-box-align: stretch; -moz-box-align: stretch; /*混合版本语法*/ -ms-flex-align: stretch; /*新版本语法*/ -webkit-align-items: stretch; /* Safari */ align-items: stretch; } .align-content-start { /*混合版本语法*/ -ms-flex-line-pack: start; /*新版本语法*/ -webkit-align-content: flex-start; /* Safari */ align-content: flex-start; } .align-content-end { /*混合版本语法*/ -ms-flex-line-pack: end; /*新版本语法*/ -webkit-align-content: flex-end; /* Safari */ align-content: flex-end; } .align-content-center { /*混合版本语法*/ -ms-flex-line-pack: center; /*新版本语法*/ -webkit-align-content: center; /* Safari */ align-content: center; } .align-content-between { /*混合版本语法*/ -ms-flex-line-pack: justify; /*新版本语法*/ -webkit-align-content: space-between; /* Safari */ align-content: space-between; } .align-content-around { /*混合版本语法*/ -ms-flex-line-pack: distribute; /*新版本语法*/ -webkit-align-content: space-around; /* Safari */ align-content: space-around; } .align-content-stretch { /*混合版本语法*/ -ms-flex-line-pack: stretch; /*新版本语法*/ -webkit-align-content: stretch; /* Safari */ align-content: stretch; } .container-demo { border: 1px solid darkcyan; padding: 10px; margin-bottom: 20px; } .item-demo { width:30px; height:30px; border:1px solid darkcyan; text-align:center; } .align-content-demo { width: 100px; height:200px; -webkit-flex-flow: wrap; /* Safari */ flex-wrap: wrap; } 主轴方向 从左向右排列 1 2 3 从右向左排列 1 2 3 从上向下排列 1 2 3 从下向上排列 1 2 3 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .direction-row { -webkit-flex-direction: row; /* Safari */ flex-direction: row; } 多列和多行布局（没有找到更好的兼容型写法，有 box-lines 属性，但支持性不是很好） 如果想要实现多行和多列布局，我们可以采取 float 布局来实现。也可以通过判断 flex-wrap 支持性来动态设置 css 样式 /** * 判断样式在浏览器中是否支持 * @param styleProp * @returns {boolean} */ function styleSupport(styleProp) { const prefix = ['webkit', 'moz', 'ms']; const $el = document.createElement('div'); const styleText = $el.style; if (styleText[styleProp] !== undefined) { return true; } for (let i = 0; i 主轴方向对齐方式 左对齐 flex-start 1 2 3 4 右对齐 flex-end 1 2 3 4 居中 center 1 2 3 4 两端对齐 space-between 1 2 3 4 平均分布 space-around 1 2 3 4 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .flex-start{ /*老版本语法*/ -webkit-box-pack: start; -moz-box-pack: start; /*混合版本语法*/ -ms-flex-pack: start; 侧轴排列方式 侧轴的起点对齐 flex-start 1 2 3 4 侧轴的终点对齐 flex-end 1 2 3 4 侧轴的中点对齐 center 1 2 3 4 按照子元素第一行文字的基线对齐 baseline 1 2 3 41333333 填满容器 stretch 1 2 3 4 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .align-items-start { /*老版本语法*/ -webkit-box-align: start; -moz-box-align: start; /*混合版本语法*/ -ms-flex-align: start; 多行侧轴方向对齐方式 与侧轴的起点对齐 flex-start 1 2 3 4 与侧轴的终点对齐 flex-end 1 2 3 4 与侧轴的中点对齐 center 1 2 3 4 与侧轴两端对齐 space-between 1 2 3 4 每行平均分布 space-around 1 2 3 4 各行占满整个侧轴线 stretch 1 2 3 4 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .align-content-start { /*混合版本语法*/ -ms-flex-line-pack: start; /*新版本语法*/ -webkit-align-content: flex-start; /* Safari */ align-content: flex-start; Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/flex/compatibility2.html":{"url":"css3/flex/compatibility2.html","title":"Flex 布局兼容性续","keywords":"","body":"兼容性写法例子续 上一节主要给出了盒子弹性布局容器的写法，这一节主要列举子元素兼容性写法 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .container-demo { border: 1px solid darkcyan; padding: 10px; margin-bottom: 20px; } .item-demo { border:1px solid darkcyan; text-align:center; } .flex-order-10{ /*老版本语法*/ -webkit-box-ordinal-group: 10; -moz-box-ordinal-group: 10; /*IE 10 语法*/ -ms-flex-order: 10; /*新版本语法*/ -webkit-order: 10; /* Safari */ order: 10; } .flex-order-3{ /*老版本语法*/ -webkit-box-ordinal-group: 3; -moz-box-ordinal-group: 3; /*IE 10 语法*/ -ms-flex-order: 3; /*新版本语法*/ -webkit-order: 3; /* Safari */ order: 3; } .flex-order--4{ /*老版本语法*/ -webkit-box-ordinal-group: -4; -moz-box-ordinal-group: -4; /*IE 10 语法*/ -ms-flex-order: -4; /*新版本语法*/ -webkit-order: -4; /* Safari */ order: -4; } .flex-order-7{ /*老版本语法*/ -webkit-box-ordinal-group: 7; -moz-box-ordinal-group: 7; /*IE 10 语法*/ -ms-flex-order: 7; /*新版本语法*/ -webkit-order: 7; /* Safari */ order: 7; } .box-flex-1{ -webkit-box-flex: 1; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 1; /* OLD - Firefox 19- */ width: 10%; /* For old syntax, otherwise collapses. */ -webkit-flex: 1; /* Chrome */ -ms-flex: 1; /* IE 10 */ flex: 1; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } .box-flex-2{ -webkit-box-flex: 2; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 2; /* OLD - Firefox 19- */ width: 20%; /* For old syntax, otherwise collapses. */ -webkit-flex: 2; /* Chrome */ -ms-flex: 2; /* IE 10 */ flex: 2; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } .box-flex-6{ -webkit-box-flex: 6; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 6; /* OLD - Firefox 19- */ width: 60%; /* For old syntax, otherwise collapses. */ -webkit-flex: 6; /* Chrome */ -ms-flex: 6; /* IE 10 */ flex: 6; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } order 属性是用来控制flex容器中flex子元素的排列顺序 order:10 order:3 order:-4 order:7 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .container-demo { border: 1px solid darkcyan; padding: 10px; margin-bottom: 20px; } .item-demo { border:1px solid darkcyan; text-align:center; } .flex-order-10{ /*老版本语法*/ -webkit-box-ordinal-group: 10; -moz-box-ordinal-group: 10; /*IE 10 语法*/ -ms-flex-order: 10; /*新版本语法*/ -webkit-order: 10; /* Safari */ order: 10; } .flex-order-3{ /*老版本语法*/ -webkit-box-ordinal-group: 3; -moz-box-ordinal-group: 3; /*IE 10 语法*/ -ms-flex-order: 3; /*新版本语法*/ -webkit-order: 3; /* Safari */ order: 3; } .flex-order--4{ /*老版本语法*/ -webkit-box-ordinal-group: -4; -moz-box-ordinal-group: -4; /*IE 10 语法*/ -ms-flex-order: -4; /*新版本语法*/ -webkit-order: -4; /* Safari */ order: -4; } .flex-order-7{ /*老版本语法*/ -webkit-box-ordinal-group: 7; -moz-box-ordinal-group: 7; /*IE 10 语法*/ -ms-flex-order: 7; /*新版本语法*/ -webkit-order: 7; /* Safari */ order: 7; } order:10 order:3 order:-4 order:7 flex 属性flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto 下面以 flex 来给出其兼容性写法，注意： 子元素必须是 display 为 block flex:1 flex:2 flex:6 示例代码 .flex-container { display: -webkit-box; /* 老版本语法: Safari 3.1-6, iOS 6-, Android browser, older WebKit browsers. */ display: -moz-box; /* 老版本语法: Firefox 19- (buggy but mostly works) */ display: -ms-flexbox; /* 混合版本语法: IE 10 */ display: -webkit-flex; /* 新版本语法： Chrome 21+ */ display: flex; /* 新版本语法： Opera 12.1, Firefox 22+ */ } .container-demo { border: 1px solid darkcyan; padding: 10px; margin-bottom: 20px; } .item-demo { border:1px solid darkcyan; text-align:center; } .box-flex-1{ -webkit-box-flex: 1; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 1; /* OLD - Firefox 19- */ width: 10%; /* For old syntax, otherwise collapses. */ -webkit-flex: 1; /* Chrome */ -ms-flex: 1; /* IE 10 */ flex: 1; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } .box-flex-2{ -webkit-box-flex: 2; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 2; /* OLD - Firefox 19- */ width: 20%; /* For old syntax, otherwise collapses. */ -webkit-flex: 2; /* Chrome */ -ms-flex: 2; /* IE 10 */ flex: 2; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } .box-flex-6{ -webkit-box-flex: 6; /* OLD - iOS 6-, Safari 3.1-6 */ -moz-box-flex: 6; /* OLD - Firefox 19- */ width: 60%; /* For old syntax, otherwise collapses. */ -webkit-flex: 6; /* Chrome */ -ms-flex: 6; /* IE 10 */ flex: 6; /* NEW, Spec - Opera 12.1, Firefox 20+ */ } flex:1 flex:2 flex:6 其他属性兼容性写法不是很全，这里就不罗列了 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/animation/":{"url":"css3/animation/","title":"css3 动画","keywords":"","body":"css3 动画 关于CSS3动画，目前来说有以下几种： 变形(transform) 转换(transition) 动画(animation) Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/animation/transform.html":{"url":"css3/animation/transform.html","title":"变形 transform","keywords":"","body":"css 动画 - transform 变形 transform 语法 transform: none; transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0); transform: translate(12px, 50%); transform: translateX(2em); transform: translateY(3in); transform: scale(2, 0.5); transform: scaleX(2); transform: scaleY(0.5); transform: rotate(0.5turn); transform: skew(30deg 30deg); transform: skewX(30deg); transform: skewY(1.07rad); transform: matrix3d(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0); transform: translate3d(12px, 50%, 3em); transform: translateZ(2px); transform: scale3d(2.5, 1.2, 0.3); transform: scaleZ(0.3); transform: rotate3d(1, 2.0, 3.0, 10deg); transform: rotateX(10deg); transform: rotateY(10deg); transform: rotateZ(10deg); transform: perspective(17px); transform: translateX(10px) rotate(10deg) translateY(5px); transform: []* | none 说明 从上面的语法可以看出，我们可以为 transform 设置一个或多个属性函数值，还可以加上前缀兼容不同的浏览器。 以下把 transform 属性值归类为： 矩阵变形matrix，包括 matrix matrix3d 移动translate，包括 translate translateX translateY translateZ translate3d 缩放scale，包括 scale scaleX scaleY scaleZ scale3d 旋转rotate，包括 rotate rotateX rotateY rotateZ rotate3d 单位为 deg（角度）,turn, rad 扭曲（倾斜）skew，包括 skew skewX skewY 单位为 deg（角度）,turn, rad perspective 开启激活 3D 效果 兼容性 例子 各种属性值实例 transform运用多个属性值例子 .transform-multi a{ width: 100px; padding: 5px; background: red; display: block; } .transform-multi a:hover { -moz-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg); -webkit-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg); -o-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg); -ms-transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg); transform: rotate(45deg) scale(0.8,1.2) skew(60deg,-30deg); } 这里需要注意的是使用多个属性值时，其之间不能用逗号（,）分隔，必须使用空格分隔。 transform-origin transform-origin CSS属性可以更改一个元素变形的原点（基点），默认为中心，即 50% 50% 0 语法 /* 单值语法 */ transform-origin: 2px; transform-origin: bottom; /* 双值语法 */ /* 用两个数字值先水平后垂直，用一个数值一关键字或两关键字不强求顺序 */ transform-origin: 3cm 2px; /* x-offset y-offset */ transform-origin: 2px left; /* y-offset x-offset-keyword */ transform-origin: left 2px; /* x-offset-keyword y-offset */ transform-origin: right top; /* x-offset-keyword y-offset-keyword */ transform-origin: top right; /* y-offset-keyword x-offset-keyword */ /* 三值语法 */ transform-origin: 2px 30% 10px; /* x-offset y-offset z-offset */ transform-origin: 2px left 10px; /* y-offset x-offset-keyword z-offset */ transform-origin: left 5px -3px; /* x-offset-keyword y-offset z-offset */ transform-origin: right bottom 2cm; /* x-offset-keyword y-offset-keyword z-offset */ transform-origin: bottom right 2cm; /* y-offset-keyword x-offset-keyword z-offset */ 说明 定义的基点值偏移量是指： x-offset 距离盒模型的左侧的或偏移值。 y-offset 距离盒模型的顶部的或偏移值。 z-offset 定义变形中心距离用户视线（z=0处）的（不能是百分比 ）偏移值。 可以指定负值 transform-style 语法 transform-style: flat | preserve-3d 说明 transform-style属性可以指定该元素在三维空间（3D）中展示，还是在二维空间中展示。有两个属性值：flat和preserve-3d，默认为 flat。 其中flat值为默认值，表示所有子元素在2D平面呈现。preserve-3d表示所有子元素在3D空间中呈现。 也就是说，如果对一个元素设置了transform-style的值为flat，则该元素的所有子元素都将被平展到该元素的2D平面中进行呈现。沿着X轴或Y轴方向旋转该元素将导致位于正或负Z轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。如果对一个元素设置了transform-style的值为preserve-3d，它表示不执行平展操作，他的所有子元素位于3D空间中。 transform-style属性需要设置在父元素中，并且高于任何嵌套的变形元素。 实例 从上面的实例可以看出，当元素.rotate设置了flat值时，其子元素img不会根据translateZ()值摊开，而在同一平面旋转；当元素.rotate设置了preserve-3d值时，其子元素img会根据translateZ()值摊开，不再会堆叠在一起。 有一点需要特别注意，如果你的元素设置了transform-style值为preserve-3d，就不能为了防止子元素溢出容器而设置overflow值为hidden，如果设置了overflow:hidden同样可以迫死子元素出现在同一平面（和元素设置了transform-style为flat效果一样）。 perspective 说明 perspective 属性对于3D变形来说至关重要。该属性会设置查看者的位置，并将可视内容映射到一个视锥上，继而投到一个2D视平面上。如果不指定透视 perspective，则Z轴空间中的所有点将平铺到同一个2D视平面中，并且变换结果中将不存在景深效果。 上面的描述可能让人难以理解，其实对于perspective属性，我们可以简单的理解为视距，用来设置用户和元素3D空间Z平面之间的距离。而其效应由他的值来决定，值越小，用户与3D空间Z平面距离越近，3D视觉效果更令人印象深刻；反之，值越大，用户与3D空间Z平面距离越远，3D视觉效果就很小。 实例 从上面的例子中可以看出，当没有设置 perspective 时，3d 属性值是不起作用的。 语法 我们再看一下 perspective 的语法 perspective：none | /* Keyword value */ perspective: none; /* values */ perspective: 20px; perspective: 3.5em; /* Global values */ perspective: inherit; perspective: initial; perspective: unset; perspective属性包括两个属性值：none和具有单位的长度值。其中perspective属性的默认值为none，表示从无限的角度来看3D物体，所以看上去是平的（2D）。 另一个值接受一个长度单位大于0的值。而且其单位不能为百分比值，也不能为负值或0。值越大，角度出现的越远，从而创建一个相当低的强度和非常小的3D空间变化。反之，此值越小，角度出现的越近，从而创建一个高强度的角度和一个大型3D变化。 比如你站在10英尺和1000英尺的地方看一个10英尺的立方体。在10英尺的地方，你距离立方体是一样的尺寸。因此视角转变远远大于站在1000英尺处的，立体尺寸是你距离立方体距离的百分之一。同样的思维适用于perspective的值。我们一起来看一个实例，来加强这方面的理解： 实例2 perspective 属性 与 transform 属性函数值 perspective 的区别 在3D变形中，除了perspective属性可以激活一个3D空间之外，在3D变形的函数中的perspective()也可以激活3D空间。 他们不同的地方是：perspective 属性是用在舞台元素上（变形元素们的共同父元素）； transform: perspective()是用在当前变形元素上，并且可以与其他的transform函数一起使用。 .stage { perspective: 600px } 可写成： .stage .box { transform: perspective(600px); } 看以下例子： 实例3 从上面的例子可以看出，虽然书写的形式，属性名称不一致，但是效果却一样。 下面说明一下这两个属性的不同之处 虽然perspective属性和perspective()函数所起的功能是一样的，但其取值以及以运用的对像有所不同 perspective属性可以取值为none或长度值（大于0的值）；而perspective()函数取值只能大于0，如果取值为0或比0小的值，将无法激活3D空间； perspective属性用于变形对像父元素；而perspective()函数用于变形对像自身，并可以和transform其他函数一起使用。 perspective-origin 利用 perspective 设置3D 效果，默认情况下，消失点位于元素的中心，但是可以通过设置perspective-origin属性来改变其位置。它实际上设置了X轴和Y轴位置，在该位置观看者好像在观看该元素的子元素。 语法 perspective-origin：[ | | left | center | right | top | bottom] | [[ | | left | center | right] && [ | | top | center | bottom]] 该属性的默认值为“50% 50%”(也就是center)，其也可以设置为一个值，也可以设置为两个长度值： 第一个长度值指定相对于元素的包含框的X轴上的位置。它可以是长度值（以受支持的长度单位表示）、百分比或以下三个关键词之一：left（表示在包含框的X轴方向长度的0%），center（表示中间点）,或right（表示长度的100%）。 第二个长度值指定相对于元素的包含框的Y轴上的位置。它可以是长度值、百分比或以下三个关键词之一：top（表示在包含框的Y轴方向长度的0%），center（表示中间点），或bottom（表示长度的100%）。 注意：perspective-origin属性应该定义在父元素上。通常perspective-origin属性本身不做任何事情，它必须被定义在设置了perspective属性的元素上。换句话说，perspective-origin属性需要与perspective属性结合起来使用，以便将视点移至元素的某个位置 示例 例子 该示例来至于 https://css-tricks.com/almanac/properties/p/perspective-origin/ backface-visibility backface-visibility 属性指定当元素背面朝向观察者时是否可见。元素的背面总是透明的，当其朝向观察者时，显示正面的镜像。 在某些情况下，我们不希望元素内容在背面可见，比如实现翻牌效果。 因为2D变换无透视效果，故该属性对2D变换无效。 语法 backface-visibility: visible backface-visibility: hidden visible 表示背面可见，允许显示正面的镜像，默认值 hidden 表示背面不可见。 简单点来说，backface-visibility 属性可用于隐藏内容的背面。默认情况下，背面可见，这意味着即使在翻转后，旋转的内容仍然可见。但当 backface-visibility 设置为hidden时，旋转后内容将隐藏，因为旋转后正面将不再可见。该功能可帮助您模拟多面的对象，例如下例中使用的纸牌。通过将backface-visibility设置为hidden，您可以轻松确保只有正面可见。 扑克牌翻转例子 下面我们再看一个例子，通过3D立方体的展示来说明 backface-visibility 的用法 3D立方体 3D 翻转例子 该例子来至于互联网 3D翻转 参考文章 https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective-origin https://developer.mozilla.org/zh-CN/docs/Web/CSS/backface-visibility http://www.w3cplus.com/content/css3-transform http://www.w3cplus.com/css3/transform-origin.html http://www.w3cplus.com/css3/transform-basic-property.html http://www.w3cplus.com/css3/css3-2d-transform.html http://www.w3cplus.com/css3/css3-3d-transform.html Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/animation/transition.html":{"url":"css3/animation/transition.html","title":"转换 transition","keywords":"","body":"css 动画 - transition 转换 概述 W3C标准中对css3的transition是这样描述的：“css的transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。” 语法 transition ： [ || || || [, [ || || || ]]* transition主要包含四个属性值 执行变换的属性：transition-property 变换延续的时间：transition-duration 在延续时间段，变换的速率变化transition-timing-function 变换延迟时间transition-delay transition-property transition-property ： none | all | [ ] [ ',' ]* transition-property是用来指定当元素其中一个属性改变时执行transition效果，其主要有以下几个值 none(没有属性改变) all（所有属性改变）这个也是其默认值 indent（元素属性名） * 当其值为none时，transition马上停止执行，当指定为all时，则元素产生任何属性值变化时都将执行transition效果， ident是可以指定元素的某一个属性值。其对应的类型如下： 1、color: 通过颜色和透明度组合变换（每个数值处理）如：background-color,border-color,color,outline-color等css属性； 2、length: 真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,padding,outline-width,margin,min-width,min-height,max-width,max-height,line-height,height,border-width,border-spacing,background-position等属性； 3、percentage:真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,min-width,min-height,max-width,max-height,line-height,height,background-position等属性； 4、integer离散步骤（整个数字），在真实的数字空间，以及使用floor()转换为整数时发生 如：outline-offset,z-index等属性； 5、number真实的（浮点型）数值，如：zoom,opacity,font-weight,等属性； 6、transform 7、rectangle:通过x, y, width 和 height（转为数值）变换，如：crop 8、visibility: 离散步骤，在0到1数字范围之内，0表示“隐藏”，1表示完全“显示”,如：visibility 9、shadow: 作用于color, x, y 和 blur（模糊）属性,如：text-shadow 10、gradient: 通过每次停止时的位置和颜色进行变化。它们必须有相同的类型（放射状的或是线性的）和相同的停止数值以便执行动画,如：background-image 11、paint server (SVG): 只支持下面的情况：从gradient到gradient以及color到color，然后工作与上面类似 12、space-separated list of above:如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化 13、a shorthand property: 如果缩写的所有部分都可以实现动画，则会像所有单个属性变化一样变化 具体什么css属性可以实现transition效果，在W3C官网中列出了所有可以实现transition效果的CSS属性值以及值的类型，大家可以点这里了解详情。这里需要提醒一点是，并不是什么属性改变都为触发transition动作效果，比如页面的自适应宽度，当浏览器改变宽度时，并不会触发transition的效果。但上述表格所示的属性类型改变都会触发一个transition动作效果。 transition-duration transition-duration ： [, ]* transition-duration是用来指定元素转换过程的持续时间，取值：为数值，单位为s（秒）或者ms(毫秒),可以作用于所有元素，包括:before和:after伪元素。其默认值是0，也就是变换时是即时的。 transition-timing-function transition-timing-function ： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , ) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , )]* 取值： transition-timing-function的值允许你根据时间的推进去改变属性值的变换速率，transition-timing-function有6个可选值 1、ease：（逐渐变慢）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0). 2、linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0). 3、ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0). 4、ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0). 5、ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0) 6、cubic-bezier：（该值允许你去自定义一个时间曲线）， 特定的 cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。 transition-delay transition-delay ： [, ]* transition-delay是用来指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行transition效果，其取值：为数值，单位为s（秒）或者ms(毫秒)，其使用和transition-duration极其相似，也可以作用于所有元素，包括:before和:after伪元素。 默认大小是\"0\"，也就是变换立即执行，没有延迟。 用法 有时我们不只改变一个css效果的属性,而是想改变两个或者多个css属性的transition效果，那么我们只要把几个transition的声明串在一起，用逗号（“，”）隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。例子 a { -moz-transition: background 0.5s ease-in,color 0.3s ease-out; -webkit-transition: background 0.5s ease-in,color 0.3s ease-out; -o-transition: background 0.5s ease-in,color 0.3s ease-out; transition: background 0.5s ease-in,color 0.3s ease-out; } 例子 例子一 例子一是在一个div中放置了几个小块，分别对应了transition-timing-function中的几种类型，我们在div的hover状态下，改变其部分属性，从而达到一种动画效果。以下是演示效果和示例代码 点击查看效果 示例代码 transition 例子 #timings-demo { border: 1px solid #ccc; padding: 10px; height: 400px; } .demo-box { width: 100px; height: 50px; text-align: center; line-height: 50px; text-align: center; color: #fff; background: #96c; -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px; -moz-box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5); -webkit-box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5); box-shadow: inset 0 0 5px rgba(102, 153, 0,0.5); margin-bottom: 10px; } /*ease效果：*/ #ease { -moz-transition: all 5s ease 0.3s; -webkit-transition: all 5s ease 0.3s; -o-transition: all 5s ease 0.3s; transition: all 5s ease 0.3s; background: #f36; } /*ease-in效果：*/ #ease-in { -moz-transition: all 3s ease-in 0.5s; -webkit-transition: all 3s ease-in 0.5s; -o-transition: all 3s ease-in 0.5s; transition: all 3s ease-in 0.5s; background: #369; } /*ease-out效果：*/ #ease-out { -moz-transition: all 5s ease-out 0s; -webkit-transition: all 5s ease-out 0s; -o-transition: all 5s ease-out 0s; transition: all 5s ease-out 0s; background: #636; } /*ease-in-out效果：*/ #ease-in-out { -moz-transition: all 1s ease-in-out 2s; -webkit-transition: all 1s ease-in-out 2s; -o-transition: all 1s ease-in-out 2s; transition: all 1s ease-in-out 2s; background: #3e6; } /*linear效果：*/ #linear { -moz-transition: all 6s linear 0s; -webkit-transition: all 6s linear 0s; -o-transition: all 6s linear 0s; transition: all 6s linear 0s; background: #999; } /*cubic-bezier效果：*/ #cubic-bezier { -moz-transition: all 4s cubic-bezier 1s; -webkit-transition: all 4s cubic-bezier 1s; -o-transition: all 4s cubic-bezier 1s; transition: all 4s cubic-bezier 1s; background: #6d6; } /*hover状态下 demo-box产生属性变化*/ #timings-demo:hover .demo-box { -moz-transform: rotate(360deg) scale(1.2); -webkit-transform: rotate(360deg) scale(1.2); -o-transform: rotate(360deg) scale(1.2); transform: rotate(360deg) scale(1.2); background: #369; border: 1px solid rgba(255,230,255,08); -moz-border-radius: 25px; -webkit-border-radius: 25px; border-radius: 25px; margin-left: 80%; height: 30px; line-height: 30px; margin-bottom: 15px; } 鼠标移上查看效果 Ease Ease-in Ease-out Ease-in-out Linear Cubic-bezier 例子二 例子二是通过CSS3的transition模仿制作jQuery的slideshow效果 点击查看效果 示例代码 transition 例子 #demoSliderContainer { background: #000; -moz-box-shadow: 1px 1px 5px #000; -webkit-box-shadow: 1px 1px 5px #000; box-shadow: 1px 1px 5px #000; padding: 0; overflow: auto; margin: 10px auto; width: 900px; } #demoSlider { border: 1px solid #000; border-width: 5px 5px 0; height: 500px; margin: 0 auto; width: 880px; overflow: hidden; position: relative; } .slide-images .slide-image { position: absolute; } .slide-images .slide-image img { z-index: 2; } .slide-images .slide-image span { background: rgba(0,0,0,0.3); -moz-border-radius: 5px 0 0 0; -webkit-border-radius: 5px 0 0 0; border-radius: 5px 0 0 0; bottom: 4px; color: rgba(255,255,255,0.8); font-size: 14px; font-weight: bold; padding: 5px 10px; position: absolute; right: 0; z-index: 3; } .slide-images .slide-image.current img { z-index: 12; } .slide-images .slide-image.current span { z-index: 13; } #demoSliderContainer .options { padding: 3px 10px; text-align: center; } #demoSliderContainer .options a { color: #91BECC; font-family: Georgia,Serif; font-size: 12px; font-weight: bold; text-decoration: none; } #demoSliderContainer .options a:hover { color: #D3E5EB; } #demoSliderContainer .slide-pager a { -moz-transition-duration: 0.5s; -webkit-transition-duration: 0.5s; -o-transition-duration: 0.5s; transition-duration: 0.5s; } #demoSliderContainer .slide-pager a.current { background-color: #91BECC; border-radius: 5px 5px 5px 5px; color: black; padding: 0 4px; } #demoSliderContainer .options .prevSlide { float: left; } #demoSliderContainer .options .nextSlide { float: right; } /*transition effect*/ .slide-images .slide-image, .slide-images .slide-image img { -moz-transition-duration: 1.5s; -webkit-transition-duration: 1.5s; -otransition-duration: 1.5s; transition-duration: 1.5s; } .slide-images.transition-opacity .slide-image { opacity: 0; width: 0; } .slide-images.transition-opacity .slide-image.current { opacity: 1; width: 500px; } .slide-images.transition-left .slide-image { left: -500px; opacity: 0; } .slide-images.transition-left .slide-image.current { left: 0; opacity: 1; } .slide-images.transition-right .slide-image { right: -880px; opacity: 0; } .slide-images.transition-right .slide-image.current { right: 0; opacity: 1; } .slide-images.transition-top .slide-image { opacity: 0; top: -500px; } .slide-images.transition-top .slide-image.current { opacity: 1; top: 0; } .slide-images.transition-bottom .slide-image { opacity: 0; bottom: -500px; } .slide-images.transition-bottom .slide-image.current { opacity: 1; bottom: 0; } .slide-images.transition-cornerzoom .slide-image { opacity: 0; } .slide-images.transition-cornerzoom .slide-image.current { opacity: 1; } .slide-images.transition-cornerzoom .slide-image img { width: 0; } .slide-images.transition-cornerzoom .slide-image.current img { width: 550px; } .slide-images.transition-zoom .slide-image { opacity: 0; } .slide-images.transition-zoom .slide-image.current { opacity: 1; } .slide-images.transition-zoom .slide-image img { left: -440px; position: relative; top: -250px; width: 1100px; } .slide-images.transition-zoom .slide-image.current img { left: 0; top: 0; width: 550px; } .slide-images.transition-dezoom .slide-image { -moz-box-shadow: 2px 2px 8px black; -webkit-box-shadow: 2px 2px 8px black; box-shadow: 2px 2px 8px black; opacity: 0; } .slide-images.transition-dezoom .slide-image.current { opacity: 1; } .slide-images.transition-dezoom .slide-image img { left: 440px; position: relative; top: 250px; width: 0; } .slide-images.transition-dezoom .slide-image.current img { left: 0; top: 0; width: 880px; } .slide-images.transition-rotate .slide-image { opacity: 0; } .slide-images.transition-rotate .slide-image.current { opacity: 1; } .slide-images.transition-rotate .slide-image img { width: 880; height: 500px; position: relative; left: -880px; top: -500px; } .slide-images.transition-rotate .slide-image.current img { width: 550px; height: 220px; left: 0; top: 0; -moz-transform: rotate(1440deg); -webkit-transform: rotate(1440deg); -o-transform: rotate(1440deg); transform: rotate(1440deg); } #options { margin: 20px auto; padding: 5px; width: 800px; } 1 2 3 4 Prev 1 2 3 4 Next Transition effect : opacity fade left slide right slide top slide bottom slide zoom de-zoom corner zoom rotate $(document).ready(function(){ $(\".slide-images\").each(function(){ var slider = $(this); var slides = $(\".slide-image\",slider); var sliderPages = $(\".slide-pager\"); //Slide Navigation var currentSlideNum = 0; slides.removeClass(\"current\"); slides.eq(currentSlideNum).addClass(\"current\"); sliderPages.each(function(){ var pages = $(\"a\",this); pages.removeClass(\"current\"); pages.eq(currentSlideNum).addClass(\"current\"); }); var goToSlide = function(slideNum) { slides.eq(currentSlideNum).removeClass(\"current\"); slides.eq(slideNum).addClass(\"current\"); sliderPages.each(function(){ var pages = $(\"a\", this); pages.eq(currentSlideNum).removeClass(\"current\"); pages.eq(slideNum).addClass(\"current\"); }); currentSlideNum = slideNum; }; var nextSlide = function() { var nextSlideNum = currentSlideNum + 1; if(nextSlideNum >= slides.size()) nextSlideNum = 0; goToSlide(nextSlideNum); }; var prevSlide = function() { var prevSlideNum = currentSlideNum - 1; if(prevSlideNum = slides.size()) return false; $(this).click(function(){ goToSlide(i); }); }); //Auto next slide var lastHumanNav = 0; $(\".prevSlide, .nextSlide, .slide-pager a\").click(function(){ lastHumanNav = new Date().getTime(); }); setInterval(function(){ var now = new Date().getTime(); if(now - lastHumanNav > 5000) nextSlide(); },5000); }); }); 参考文章 http://www.w3cplus.com/content/css3-transition https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/animation/animation.html":{"url":"css3/animation/animation.html","title":"动画 animation","keywords":"","body":"css 动画 - animation 动画效果 概述 animation 动画是利用 css3 中的 animation 和 keyframes 结合使用实现的，animation 是用来定义动画名称、 动画持续时间、动画频率、动画延迟时间、是否循环播放、动画方式等。而 keyframes 俗称“关键帧”是来定义动画播放各帧效果的，类似于 flash 中的帧。 keyframes Keyframes 语法规则是由\"@keyframes\"开头，后面紧接着是这个“动画的名称”加上一对花括号“{}”，括号中就是一些不同时间段样式规则，有点像我们css的样式写法一样。对于一个\"@keyframes\"中的样式规则是由多个百分比构成的，如“0%”到\"100%\"之间，我们可以在这个规则中创建多个百分比，分别给每一个百分比中给需要有动画效果的元素加上不同的属性，从而让元素达到一种在不断变化的效果，比如说移动，改变元素颜色，位置，大小，形状等，不过有一点需要注意的是，我们可以使用“from”和“to”来代表一个动画是从哪开始，到哪结束，也就是说这个 \"from\"就相当于\"0%\"而\"to\"相当于\"100%\",值得一说的是，其中\"0%\"不能像别的属性取值一样把百分比符号省略，我们在这里必须加上百分符号（“%”）。如果没有加上的话，我们这个keyframes是无效的，不起任何作用。因为keyframes的单位只接受百分比值。 keyframes可以指定任何顺序排列来决定Animation动画变化的关键位置。其具体语法规则如下： keyframes-rule: '@keyframes' IDENT '{' keyframes-blocks '}'; keyframes-blocks: [ keyframe-selectors block ]* ; keyframe-selectors: [ 'from' | 'to' | PERCENTAGE ] [ ',' [ 'from' | 'to' | PERCENTAGE ] ]*; 分开展示其语法为 @keyframes animation-name { from { properties: properties value; } percentage { properties: properties value; } to { properties: properties value; } } //或者全部写成百分比的形式 @keyframes IDENT { 0% { properties: properties value; } Percentage { properties: properties value; } 100% { properties: properties value; } } animation animation 是如下属性的简写形式：animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction 和 animation-fill-mode. 各属性初始值为 animation-name: none animation-duration: 0s animation-timing-function: ease animation-delay: 0s animation-iteration-count: 1 animation-direction: normal animation-fill-mode: none animation-play-state: runnin animation 适应于所有元素，包括伪类 after 和 before 下面分别介绍一下个属性的用法 1. animation-name: 语法 animation-name: none | IDENT[,none | IDENT]*; 取值说明 animation-name: 是用来定义一个动画的名称，其主要有两个值：IDENT是由Keyframes创建的动画名，换句话说此处的IDENT 要和Keyframes中的IDENT一致，如果不一致,将不能实现任何动画效果；none为默认值，当值为none时，将没有任何动画效果。 另外我们这个属性跟前面所讲的transition一样，可以同时附几个animation给一个元素，我们只需要用逗号“，”隔开。 2. animation-duration： 语法 animation-duration: [,]* 取值说明 animation-duration是用来指定元素播放动画所持续的时间，取值: 为数值，单位为s（秒.）其默认值为 “0”。 这个属性跟transition中的transition-duration使用方法是一样的。 3. animation-timing-function: 语法 animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , ) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , )]* 取值说明 animation-timing-function: 是指元素根据时间的推进来改变属性值的变换速率，说得简单点就是动画的播放方式。 他和transition中的transition-timing-function一样，具有以下六种变换方式 1、ease：（逐渐变慢）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0). 2、linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0). 3、ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0). 4、ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0). 5、ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0) 6、cubic-bezier：（该值允许你去自定义一个时间曲线）， 特定的 cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。 4. animation-delay: 语法 animation-delay: [,]* 取值说明 animation-delay: 是用来指定元素动画开始时间。取值为为数值，单位为s(秒)，其默认值也是0。 这个属性和transition-delay使用方法是一样的。 5. animation-iteration-count 语法 animation-iteration-count:infinite | [, infinite | ]* 取值说明 animation-iteration-count 是用来指定元素播放动画的循环次数，其可以取值为数字，其默认值为 1 infinite为无限次数循环。 6. animation-direction 语法 animation-direction: normal | reverse | alternate | alternate-reverse 取值说明 normal（正常）这个值是通过你列出的关键帧声明直接播放的 reverse（反转）表示你的动画是按照你的关键帧序列反向播放的，就像回绕播放一样 alternate（交替）如果你的动画的iteration-count属性的值大于1，你可以使用alternate值。第一次按照正常的顺序播放，第二次就会反向播放，然后正向，然后反向……方向交替，从正向开始，直到iteration-count跑完 alternate-reverse（交替反转）alternate-reverse是和alternate一样的意思，它是从反方向开始的。 7. animation-fill-mode animation-fill-mode 属性可以接受四个值 none 默认值 backwards 在动画结束之后，会保持最后一帧的样式 forwards 用来处理设置动画延迟后播放，开始的时候动画的流畅性 both forwards和backwards的结合 8. animation-play-state 语法 animation-play-state:running | paused [, running | paused]* 取值说明 animation-play-state 主要是用来控制元素动画的播放状态。其主要有两个值，running 和 paused， 其中running为默认值。 他们的作用类似于我们的音乐播放器一样，可以通过paused将正在播放的动画停下，也可以通过running将暂停的动画重新播放， 我们这里的重新播放不是从元素动画的开始播放，而是从暂停的那个位置开始播放。另外如果暂停了动画的播放， 元素的样式将回到最原始设置状态。 下面给出一图片来帮助我们理解 animation 简写 W3C目前定义的简写顺序是这样的 = || || || || || || || 要使用简写在一个元素中定义多个动画，你需要使用逗号来分隔每个动画的属性值。比如在一个元素中定义两个动画需要这样写： animation: myAnimation 1s ease-in-out 2s 4, myOtherAnimation 4s ease-out 2s; 贝塞尔曲线 工具与资源 创建三次贝塞尔曲线的工具 Lea Verou 创建三次贝塞尔曲线工具 三次贝塞尔曲线的交互版本-缓动函数速查表 Penner easing方程 有各种语言的版本，less，sass 和 js 等 网页动画的十二原则 animation 与 keyframes 结合使用 先从例子入手，基于 webkit 内核 @-webkit-keyframes wobble { 0% { margin-left: 100px; background: green; } 40% { margin-left: 150px; background: orange; } 60% { margin-left: 75px; background: blue; } 100% { margin-left: 100px; background: red; } } 这里我们定义了一个叫“wobble”的动画，他的动画是从0%开始到100%时结束，从中还经历了一个40%和60%两个过程，上面代码具体意思是 wobble动画在0%时元素 margin-left 为100px， 背景色为green，然后40%时元素过渡到 margin-left 为150px并且背景色为orange，60%时元素过渡到 margin-left 为75px，背景色为blue，最后100%结束动画的位置元素又回到起点 margin-left 为100px处,背景色变成red。 Keyframes定义好了以后，我们需要通过 animation 来调动画 “wobble” CSS3的animation类似于transition属性，他们都是随着时间改变元素的属性值。他们主要区别是transition需要触发一个事件(hover事件或click事件等)才会随时间改变其css属性；而animation在不需要触发任何事件的情况下也可以显式的随着时间变化来改变元素css的属性值，从而达到一种动画的效果。这样我们就可以直接在一个元素中调用animation的动画属性,基于这一点，css3的animation就需要明确的动画属性值，这也就是回到我们上面所说的，我们需要keyframes来定义不同时间的css属性值,达到元素在不同时间段变化的效果。 下面为调用 wobble 代码 .animation-wobble { width: 50px; height: 50px; margin-left: 100px; background: blue; -webkit-animation-name: wobble;/*动画属性名，也就是我们前面keyframes定义的动画名*/ -webkit-animation-duration: 10s;/*动画持续时间*/ -webkit-animation-timing-function: ease-in-out; /*动画频率，和transition-timing-function是一样的*/ -webkit-animation-delay: 2s;/*动画延迟时间*/ -webkit-animation-iteration-count: 10;/*定义循环资料，infinite为无限次*/ -webkit-animation-direction: alternate;/*定义动画方式*/ } 点击查看 wobble 例子效果 CSS Animation动画效果将会影响元素相对应的css值，在整个动画过程中，元素的变化属性值完全是由animation来控制， 动画后面的会覆盖前面的属性值。如上面例子，其默认值是：margin-left:100px;background: blue； 但当我们在执行动画0%时，margin-left:100px,background:green；当执行到40%时， 属性变成了：margin-left:150px;background:orange;当执行到60%时margin-left:75px;background:blue; 当动画 执行到100%时：margin-left:100px;background: red;此时一次动画完成。 margin-left和background两个属性值将是以100%时为主。接着执行下次动画效果，此时不会产生叠加效果， 只是一次一次覆盖前一次出现的css属性。就如我们平时的css一样，最后出现的权限是最大的。当动画结束后，样式回到默认效果。 实例讲解 1. 发光变色的button 这个例子主要是通过在 keyframes 中改变元素的 background;color;box-shadow 三个属性，来达到一种发光变色的button效果， 我们来看其实现代码 HTML Code 发光的button CSS Code /*给这个按钮创建一个动名名称：buttonLight，然后在每个时间段设置不同的background,color来达到变色效果，改变box-shadow来达到发光效果*/ @-webkit-keyframes buttonLight { from { background: rgba(96, 203, 27,0.5); -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 200, 0.5); color: red; } 25% { background: rgba(196, 203, 27,0.8); -webkit-box-shadow: 0 0 10px rgba(255, 155, 255, 0.5) inset, 0 0 8px rgba(120, 120, 200, 0.8); color: blue; } 50% { background: rgba(196, 203, 127,1); -webkit-box-shadow: 0 0 5px rgba(155, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 100, 1); color: orange; } 75% { background: rgba(196, 203, 27,0.8); -webkit-box-shadow: 0 0 10px rgba(255, 155, 255, 0.5) inset, 0 0 8px rgba(120, 120, 200, 0.8); color: black; } to { background: rgba(96, 203, 27,0.5); -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.3) inset, 0 0 3px rgba(220, 120, 200, 0.5); color: green; } } a.btn { /*按钮的基本属性*/ background: #60cb1b; font-size: 16px; padding: 10px 15px; color: #fff; text-align: center; text-decoration: none; font-weight: bold; text-shadow: 0 -1px 1px rgba(0,0,0,0.3); -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px; -moz-box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8); -webkit-box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8); box-shadow: 0 0 5px rgba(255, 255, 255, 0.6) inset, 0 0 3px rgba(220, 120, 200, 0.8); /*调用animation属性，从而让按钮在载入页面时就具有动画效果*/ -webkit-animation-name: buttonLight; /*动画名称，需要跟@keyframes定义的名称一致*/ -webkit-animation-duration: 5s;/*动画持续的时间长*/ -webkit-animation-iteration-count: infinite;/*动画循环播放的次数*/ } 效果 发光变色的button 2. 方形旋转变成圆形 我们这个demo是通过 transform 的 rotate 和 border-radius 值，把一个方形图片随着时间的推移，慢慢的转换成一个圆形图片， 下面我们来看看其具体实现的效果 HTML Code Click CSS Code /*定义方型转化为圆型的动画round*/ @-webkit-keyframes round { from{ -webkit-transform: rotate(36deg); -webkit-border-radius: 2px; } 10%{ -webkit-transform: rotate(72deg); -webkit-border-radius: 4px; } 20% { -webkit-transform: rotate(108deg); -webkit-border-radius: 6px; } 30% { -webkit-transform: rotate(144deg); -webkit-border-radius: 9px; } 40%{ -webkit-transform: rotate(180deg); -webkit-border-radius: 12px; } 50%{ -webkit-transform: rotate(216deg); -webkit-border-radius: 14px; } 60% { -webkit-transform: rotate(252deg); -webkit-border-radius: 16px; } 70% { -webkit-transform: rotate(288deg); -webkit-border-radius: 19px; } 80%{ -webkit-transform: rotate(324deg); -webkit-border-radius: 22px; } to { -webkit-transform: rotate(360deg); -webkit-border-radius: 25px; } } /*给方型box一个初步样式*/ a.box { display: block; width: 50px; height: 50px; background: red; margin-bottom: 20px; } /*圆型box的样式，并在这里应用animation*/ a.round { -webkit-border-radius: 25px; -moz-border-radius: 25px; border-radius: 25px; background: green; -webkit-animation-name: round; /*动画名称*/ -webkit-animation-duration: 5s;/*播放一次所持续时间*/ -webkit-animation-timing-function: ease;/*动画播放频率*/ -webkit-animation-iteration-count: infinite;/*动画播放次涒为无限次*/ } /*click button效果*/ .click-btn { background: rgba(125,220,80,0.8); -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px; -webkit-box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3); -moz-box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3); box-shadow: inset 0 0 8px rgba(255,255,255,0.8),0 0 10px rgba(10,255,120,0.3); padding: 5px 10px; color: #369; font-size: 16px; font-weight: bold; text-align: center; text-shadow: 0 -1px 0 rgba(0,0,0,0.5); cursor: pointer; } js Code: document.getElementByClass('click-btn')[0].addEventListener('click', function() { var round = document.getElementById('round') round.className = round.className + ' round'; }, false); 载入时 box 是没有任何动画效果的，当我们点击了click button 后会给原 box 上加上一个 round 的 class样式，从而触发了一个round的动作。请看效果 方形旋转变成圆形 更多例子可以参考这里 webdesignersblog slodive impressivewebs 动画相关事件 可以参见这篇文章 http://www.sitepoint.com/css3-animation-javascript-event-handlers/ 参考文章 http://www.w3cplus.com/content/css3-animation http://www.w3cplus.com/css3/CSS3-animation.html https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/animation/compatibility.html":{"url":"css3/animation/compatibility.html","title":"css3 动画兼容性","keywords":"","body":"兼容型 css-animation 兼容性 目前 css-animation 动画在移动端都支持，可以放心使用 transform 和 transition 移动端也都支持 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"css3/icon/":{"url":"css3/icon/","title":"css3 图标库","keywords":"","body":"css3 图标库 icomoon 图标库 200个纯CSS3写的图标 支持复制代码 酷炫的css3图标loading动画效果代码 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"html5/":{"url":"html5/","title":"html5","keywords":"","body":"html5 fetch 上传附件 https://davidwalsh.name/fetch const formData = new FormData(); formData.append('imgFiles', imgFiles); formData.append('thirdAccId', thirdAccId); formData.append('accountType', accountType); fetch('http://hongbao-api.jdpay.com:8099/redbag/uploadWishImg', { method: 'post', body: formData }); Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"javascript/":{"url":"javascript/","title":"JavaScript","keywords":"","body":"JavaScript JavaScript 相关技术和框架整理 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"javascript/es.next/":{"url":"javascript/es.next/","title":"es.next 学习笔记","keywords":"","body":"es.next 学习笔记 参考资料 介绍 es.next 语法帖子 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"javascript/standard/":{"url":"javascript/standard/","title":"JavaScript 代码规范","keywords":"","body":"JavaScript 代码规范 我们基于 eslint 来规范我们的 JavaScript 代码，减少错误，方便阅读 参考资料 eslint-config-airbnb eslint-config-airbnb 中文版 不是最新的，建议看英文版 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"javascript/test/":{"url":"javascript/test/","title":"JavaScript 单元测试","keywords":"","body":"JavaScript 单元测试 参考资料 enzyme teaspoon Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"javascript/react/":{"url":"javascript/react/","title":"React ecosystem","keywords":"","body":"React ecosystem 参考资料 react-redux-links react-howto 利用electron搭建基础 react 项目 https://github.com/nswbmw/N-blog/wiki/%E7%95%AA%E5%A4%96%E7%AF%87%E4%B9%8B%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8-Handlebars https://github.com/bendc/frontend-guidelines Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"typescript/":{"url":"typescript/","title":"TypeScript","keywords":"","body":"TypeScript TypeScript 相关知识点与使用技巧 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-01-18 09:12:11 "},"typescript/knowledge-point/":{"url":"typescript/knowledge-point/","title":"语法点学习笔记","keywords":"","body":"TypeScript 知识点 数据类型 原始数据类型分为：boolean number string void null undefined 任意值：any 联合类型：联合类型使用 | 分隔每个类型，例如：let myFavoriteNumber: string | number; 对象类型：一个对象类型需要提前定义一个接口 例子 interface Person { name: string; age: number; } let tom: Person = { name: 'Tom', age: 25 }; 注意：定义的变量比接口少了一些属性是不允许的，多一些属性也是不允许的 可选属性 interface Person { name: string; age?: number; } let tom: Person = { name: 'Tom' }; let linder: Person = { name: 'Linder', age: 25 }; 任意属性 ```typescript interface Person {name: string; age?: number; [propName: string]: any; } let tom: Person = { name: 'Tom', gender: 'male' }; 需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集 ```typescript interface Person { name: string; age?: number; [propName: string]: string; } let tom: Person = { name: 'Tom', age: 25, gender: 'male' }; // Initializer type {gender: string, name: string, age: number} is not assignable to variable type Person 上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。 只读属性 ```typescript interface Person {readonly id: number; name: string; age?: number; [propName: string]: any; } let tom: Person = { id: 89757, // 此处不会报错，并且必须给只读属性赋值 name: 'Tom', gender: 'male' }; // Attempt to assign to const or readonly variable tom.id = 9527; 注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候 * 数组类型 在 TypeScript 中，数组类型有多种定义方式，比较灵活。 * 「类型 + 方括号」表示法 ```typescript let fibonacci: number[] = [1, 1, 2, 3, 5]; 数组的项中不允许出现其他的类型；数组的一些方法的参数也会根据数组在定义时约定的类型进行限制 // Type 'string' is not assignable to type 'number'. let fibonacci: number[] = [1, '1', 2, 3, 5]; // Argument of type '\"8\"' is not assignable to parameter of type 'number'. fibonacci.push('8'); 数组泛型表示法 我们也可以使用数组泛型（Array Generic） Array 来表示数组：let fibonacci: Array = [1, 1, 2, 3, 5]; 用接口表示数组 ```typescript interface NumberArray { [index: number]: number; } let fibonacci: NumberArray = [1, 1, 2, 3, 5]; * 类数组 ```typescript function sum() { let args: { [index: number]: number; length: number; callee: Function; } = arguments; } any 在数组中的应用 一个比较常见的做法是，用 any 表示数组中允许出现任意类型let list: any[] = ['xcatliu', 25, { website: 'http://xcatliu.com' }]; HTMLElement 变量的声明 可以使用关键字 as ，以下是例子 const iframe = document.getElementById('circle-window') as HTMLIFrameElement; const circleBtn = document.getElementById('circleBtn') as HTMLButtonElement; 参考 阮一峰 TypeScript 入门教程 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2019-12-26 10:09:54 "},"web/":{"url":"web/","title":"Web 前端综合","keywords":"","body":"相关工具 这里会给出比较实用的相关工具，包括以下 git Atom 编辑器使用教程 Markdown 使用帮助 SwitchHosts 切换 host 插件 Charles 抓包工具 mac 学习笔记 规范化代码风格插件 WebStorm 操作指南 node 学习笔记 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2018-05-04 18:08:32 "},"web/code-lint.html":{"url":"web/code-lint.html","title":"代码 lint","keywords":"","body":"Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2018-05-04 18:07:01 "},"mobile/":{"url":"mobile/","title":"h5 手机端知识点","keywords":"","body":"h5 手机端知识点 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"plugins/":{"url":"plugins/","title":"插件与框架","keywords":"","body":"插件与工具 轮播图插件 Swiper Swiper 中文 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"chrome/":{"url":"chrome/","title":"Chrome 相关","keywords":"","body":"Chrome 相关 相关资料 官方开发者文档 Chrome 开发者工具中文指南 该文章在极客学院的链接 中文参考 中文参考 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"chrome/devtools.html":{"url":"chrome/devtools.html","title":"Chrome 开发者工具","keywords":"","body":"Chrome 开发者工具 开发调试技巧 我们知道在当前的文件中可以搜索一个特殊的字符串，同时也支持文本替换，选中 “Relpace” 将会出现第二个输入区域来填写用于替换的文本。 替换后保存，就可以接着运行调试代码了，也可以对修改的 js 或 css 文件另存为本地 利用Snippets自定义 JavaScript 片段，这样可以创建测试代码、小工具或其他任何代码，一般用 Snippets 来创建书签、实用工具、Debugging 或 Monkey-patching。Snippets 位于 sources面板中，选中一个创建的文件，右击点 run 运行，也可以利用快捷键（Ctr / Cmd + Enter），也可以运行部分代码，选中后点击右键，选择 “Evaluate in Console”，快捷键为 Ctrl + Shift + E 启用尺子，在 Setting > Preferences > Show rulers 下可以启用一个尺子，当你鼠标悬停在某个元素上或者选中一个元素的时候，它会显示出来。 在开发者工具中的颜色选择器：在 style 面板中，点击样式中颜色值前面的小图标，可弹出颜色选择框 在元素面板中拖曳，可以重新定位元素位置 强制元素状态，如果我们想要查看一个元素的 :active，:hover，:focus，:visited，对应的样式，我们可以选中某一元素，右击，选择对应的元素状态行为即可。也可以在 Style 面板中点击 :hov 来调出状态选项 通过开发者工具编写并调试 Sass（这个功能不错，待研究一下） 清除网络缓存和 cookies，在 network 面板中右击（Ctrl+左击）选择 clear browser cache 或 clear browser cookie 可以为 DOM 元素设置断点，当你不确定 JavaScript 脚本的哪一部分会更新给定元素的时候，你可以使用 DOM 断点来调试复杂的 JavaScript 应用。DOM 断点可以设置 子树的修改，属性修改，节点移除，右击某个 DOM 树，选择 Break On 查看元素事件监听器，参见这里 http://wiki.jikexueyuan.com/project/chrome-devtools/editing-styles-and-the-dom.html 模拟网络连接，在 network 面板中可以选择连接速度来模拟在弱网甚至没网的情况下，页面加载情况 控制台命令 我们可以读这篇文章来学习控制台相关命令 http://wiki.jikexueyuan.com/project/chrome-devtools/using-the-console.html Console 控制台命令，主要有： console.info() console.debug() console.log() console.error() console.warn() console.assert() console.group() console.groupEnd() assert 断言 console.assert() 方法仅仅只当它的第一个参数为 false 时才显示一个错误信息字符串（它的第二个参数） 一个简单的断言并且如何展示的例子。 在下面的代码中，如果在列表中的子节点的数量超过 500，将会在控制台中引起错误信息。 console.assert(list.childNodes.length 500\"); 输出分组 你可以通过分组命令把相关联的输出信息分在一起。group 命令通过一个字符串的参数来给你的组命名。控制台将会把所有所有的输出信息组合到一块。要结束分组，你只需要调用 groupEnd 即可。 一个分组的例子 var user = \"jsmith\", authenticated = false; console.group(\"Authentication phase\"); console.log(\"Authenticating user '%s'\", user); // authentication code here... if (!authenticated) { console.log(\"User '%s' not authenticated.\", user) } console.groupEnd(); 分组信息也可以嵌套使用 console.groupCollapsed() 的用法与 console.group() 类似，只是可以把分组后输出的结果折叠显示 浏览结构化数据 console.table() 提供了一个简单的方法来查看相似数据对象。这将给一个数据提供属性并且创建一个头。行数据将会从每一个索引属性值中获取。 控制台中一个使用 2 个数组的示例的显示。 console.table([{a:1, b:2, c:3}, {a:\"foo\", b:false, c:undefined}]); console.table([[1,2,3], [2,3,4]]); console.table() 中的第二个参数是可选项。你可以定义任何你想显示的属性字符串数组。 一个使用了对象集合的控制台输出表。 示例代码： function Person(firstName, lastName, age) { this.firstName = firstName; this.lastName = lastName; this.age = age; } var family = {}; family.mother = new Person(\"Susan\", \"Doyle\", 32); family.father = new Person(\"John\", \"Doyle\", 33); family.daughter = new Person(\"Lily\", \"Doyle\", 5); family.son = new Person(\"Mike\", \"Doyle\", 8); console.table(family, [\"firstName\", \"lastName\", \"age\"]); 字符串的替换和格式化 任何日志方法的第一个参数可能都会包含一个或者多个格式说明符。一个说明符由一个 % 符号和后面跟着的字符组成，这个字符用来定义用于格式化的值。这个参数跟随的字符串就是占位符中所要显示的。 下面的例子使用了字符串和数字格式来插入要输出的字符串。你将会看到在控制台中 Sam 有 100 个点。 console.log(\"%s has %d points\", \"Sam\", 100); 完整的格式化说明符如下： 格式符 说明 %s 格式化成 string %i 或者 %d 格式化成 integer %f 格式化成一个浮点类型 %o 格式化成一个可扩展的 DOM 元素。就跟在元素面板中看到的一样 %o 格式化成一个可扩展的 JavaScript %c 通过第二个参数来申请一个 CSS 风格的输出字符串 将 DOM 元素格式化成 JavaScript 对象 当你想要在控制台中记录一个 DOM 元素，就显示成了 XML 格式。在元素面板中也会是同样的显示。要显示 JavaScript 格式的信息，你可以使用 dir() 方法或者是在 log() 中使用占位符来替换成你的 JavaScript。 看小面的例子 console.log(document.body.firstElementChild) dir(document.body.firstElementChild) 运行一下就可以看出他们的不同之处 计算时间开销 通过 time() 方法可以启动一个计时器。你必须输入一个字符串来识别时间的标记。当你要结束计算的时候，使用 timeEnd() 方法，并且传递一个相同的字符串给构造器。控制台会在 timeEnd() 方法结束的时候，记录下标签以及时间的花销。 示例代码： console.time(\"Array initialize\"); var array= new Array(1000000); for (var i = array.length - 1; i >= 0; i--) { array[i] = new Object(); }; console.timeEnd(\"Array initialize\"); 快捷键 Chrome 开发者工具(DevTools)中所有快捷方式列表 Ctrl + o (windows,Linux) Cmd + o (Mac OS X) 当焦点定位到 Chrome developer tools 中，按下该快捷键，会自动切换到 sources，并弹出过滤窗口，通过模糊输入文件名，找到要查看的 js、 css、html、png 等文件，注意模糊匹配支持驼峰查找，比如：打开FooBarScript.js，你可以只写 FBaSc，这样可以节省时间。 Ctrl + Shift + F (Windows,Linux) Cmd + Opt + F (Mac OS X) 在所有文件中搜索，支持正则表达式搜索 Ctrl + Shitf + O (Windows,Linux) Cmd + Shitf + O (Mac OS X) 进入源面板(sources)，然后就可以使用该快捷键来打开一个对应函数/特定选择器的选择框，在该选择框可以查找函数或方法/css选择器，这样就可以迅速定位到要查询的位置，方便快捷 Ctrl + P + : (Windows) Cmd + P + : 快速跳转到某一行 扩展工具 利用开发者工具测试 iOS 应用 PonyDebugger 是一个客户端的库同时也是一个使用 Chrome 开发工具来调试应用网络状况以及管理对象上下文的网关服务器。 JSRunTime：开发者工具检索 JavaScript 对象的拓展 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"chrome/extensions_development.html":{"url":"chrome/extensions_development.html","title":"Chrome extensions 开发","keywords":"","body":"Chrome extensions 开发 参考资料 http://www.cnblogs.com/guogangj/p/3235703.html http://open.chrome.360.cn/extension_dev/overview.html Chrome扩展开发文档 Chrome扩展及应用开发（首发版） 示例代码 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"chrome/app.html":{"url":"chrome/app.html","title":"Chrome app 开发","keywords":"","body":"Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"chrome/extensions.html":{"url":"chrome/extensions.html","title":"Chrome 扩展程序","keywords":"","body":"chrome 扩展程序和开发者工具 扩展程序 下面介绍开发过程中比较实用的工具 Prism-Pretty 这是一款非常不错的 JS、CSS 代码格式化高亮的 Chrome 扩展，详细介绍看这里，http://www.v2ex.com/t/164225 Devtools Terminal浏览器终端操作，安装过程稍微有点复杂，按照官方说的一步一步安装即可，需要 nodejs 环境，参考帮助文档 http://blog.dfilimonov.com/2013/09/12/devtools-terminal.html Eye Dropper 吸取网页中的颜色 BrowserStack Local 本地测试app，没搞明白怎么用，待研究 Page Ruler ——画一把尺子以得到像素维数和定位，并测量任何网页上的元素。 Pesticide ——这个扩展可以插入Pesticide CSS到当前页，形成每个元素的示意图以便于更好地看到它们在页面上的位置。 Responsive Web Design Tester ——在移动设备上测试移动网站。此扩展反映了移动设备的大小和它的浏览器。 Palettab ——将超棒的颜色和字体带给新的标签页!每次点击新标签按钮，都会给你一点点新鲜。该扩展插件可以帮助我们选择背景主题和和字体 HTML5 Outliner ——用标题和分节元素生成一个可导航的页面大纲。 SelectorGadget ——Selector Gadget 是一个开源的Chrome浏览器扩展，能够让CSS选择器轻而易举地生成和发现于复杂网站。 Stylebot ——瞬间改变网站的外观。 开发者工具 像Sublime Text一样使用Chrome DevTools chrome-devtools-zerodarkmatrix-theme 该主题不错 greybeard-devtools 设置自定义主题，需要 chrome://flags/ 然后开启开发者功能，打开 chrome devtools 选择 setting 切换到 experiments 勾选 Allow custom UI themes 参考文章 http://www.html5cn.org/article-9324-1.html Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"reference/":{"url":"reference/","title":"参考资料","keywords":"","body":"参考资料 css3 html5 JavaScript 代码高亮插件 综合 html5移动端常见问题集锦 高清显示屏原理及设计方案 白色橡树博客 工具类网站 Searchcode Searchcode：是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge和Fedora Project平台搜索公开的源码。 在线模拟 http 请求 在线HTTP接口测试等 GraphicsMagick GraphicsMagick 能够动态的生成图片，特别适用于互联网的应用。可以用来处理调整尺寸、旋转、加亮、颜色调整、增加特效等方面 比较好的前端学习网站 w3cplus 检测各种属性浏览器兼容性 开源前端库、框架和插件集合 前端手册 参考手册 CSS参考手册 cdn 公共库 百度静态资源公共库 解决问题的好助手 stackoverflow.com Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"tools/":{"url":"tools/","title":"相关工具","keywords":"","body":"相关工具 这里会给出比较实用的相关工具，包括以下 git Atom 编辑器使用教程 Markdown 使用帮助 SwitchHosts 切换 host 插件 Charles 抓包工具 mac 学习笔记 规范化代码风格插件 WebStorm 操作指南 node 学习笔记 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"tools/git.html":{"url":"tools/git.html","title":"git","keywords":"","body":"git 添加到github中相关步骤（简单版） 在github上创建一个资源库 Repository 在当前项目路径下 初始化 git init 添加： git add -A 或 git add . 提交： git commit -m \"Init this project.\" 绑定 github远程仓库（我们用ssh方式，这样每次提交不用输入密码）： git remote add origin git@github.com:username/repository.git 提交到服务器端：git push origin master 这里需要注意的是：如果我们在github中创建资源库的时候添加了readme.md等文件，在提交到服务器之前需要git pull，执行以下命令 git pull git@github.com:username/repository.git master 设置 git push 直接提交到远程仓库中可以执行以下命令 git push --set-upstream origin master 我们也可以直接用以下命令先把远程代码clone到本地，再 add commit。这种方式比较简单一些 git clone git@github.com:username/repository.git 创建分支 git branch v0.0.1 创建本地分支 git checkout v0.0.1 切换到本地分支 git merge -m \"Merge from master\" master 合并分支（需要的话） git push --set-upstream origin v0.0.1 提交到服务器端 创建tag（所创建的tag指向所在的分支，这里创建轻量级的tag） 参考文章 http://blog.csdn.net/wh_19910525/article/details/7470850 git tag 0.0.1 创建tag git push origin --tags 提交的服务器端（github） git tag -d 0.0.1 删除本地tag git push origin :refs/tags/0.0.1 删除远程tag 拉取远程分支到本地 git checkout -b local-branchname remotes/origin/remote_branchname 举例如下： git checkout -b local-branchname remotes/origin/remote_branchname 从一个资源切换到另一个资源 如果之前在 git 上创建了一个资源(repository)，如果想把本地的代码提交到另一个新的资源(repository)上，可以执行以下命令 git remote rm origin git remote add origin git@github.com:myname/newrep.git git branch --set-upstream-to=origin/dev dev # 服务端已存在 dev 分支，dev 也可以改成 master # 或者 git push --set-upstream origin dev #服务端没有 dev 分支时，dev 也可以改成 master # 对于与服务端有冲突的代码时，可以加上 --allow-unrelated-histories 允许合并有冲突的代码 git pull --allow-unrelated-histories 查看远程分支git branch -a 详细参考这里 和这里 切换到 tag tag_name 值本地分支，或远程分支 git checkout -b branch_name tag_name 从服务端拉取某一分支到本地 本地 git init 初始化项目 用服务端分支名给本地创建一个分支 git checkout -b branchName 提交本地分支代码 绑定服务端资源 git remote add origin http://jcode.cbpmgt.com/git/ft_personal_account.git 本地分支与服务端关联 git branch --set-upstream-to=origin/dev dev 更新服务端代码 git pull --allow-unrelated-histories 加上 --allow-unrelated-histories 允许合并有冲突的代码 解决冲突，提交代码 git 常见命令 （持续完善中） 添加文件 git add 选项和说明 -u 只添加修改的文件 -A 添加所有文件，包括已删除的文件 git add . 添加修改和新增的文件（不包括已删除的文件） git add file*.js 添加指定的文件，可以用通配符 提交 git commit 修改最后一次提交 有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了，这时我们可以使用 --amend 选项重新提交，把漏掉的文件补上或是 修改提交信息。 git commit --amend$ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend 取消已经暂存的文件 我们不小心用 git add . 全加到了暂存区域，我们可以执行 git reset HEAD 取消某个文件，或所有文件， 是指要取消的暂存文件，不输入，则取消所有。或者直接执行 git reset 取消所有暂存 撤销上一次的 commit，也可以是上几次的 git reset --soft HEAD~1 后面数字可以看作是取消的 commit 次数，--soft 参数表示只取消 commit 但保留文件的修改（相当于git add 之后的的状态），如果你想连修改都不要的话就用 --hard 参数。 取消上一次操作，还可以这样 git reset HEAD^ 根据每次版本 hashId 来撤销，首先执行 git log ，找到要恢复的 hashId，然后 git reset --hard hashId 撤销上一次或前几次的 commit 后，执行 git status 发现以前的 commit 没有记录了，如果我们此事又不想撤销了，这时可以使用以下命令来处理 $ git reflog b7057a9 HEAD@{0}: reset: moving to b7057a9 98abc5a HEAD@{1}: commit: more stuff added to foo b7057a9 HEAD@{2}: commit (initial): initial commit # 再执行以下操作，强制回退到上一处提交的代码，注意执行以下命令，本地已经修改的文件会全部回退，所以需要做好备份 git reset --hard 98abc5a 撤销已经同步到服务器的提交 git log 查看要回退的记录 git reset --hard logid 撤回到某一 logid git push --force 强制提交到远程服务端 推送 git push 删除远程分支和taggit push origin --delete git push origin --delete tag git subtree 在 git 版本 1.7.9.4 中，引入了 git-subtree，基本是用于替换 git-submodule。git-submodule 处理太复杂，git-subtree 因此应运而生。git 官方也推荐尽量采用 git-subtree。 git subtree 不只是可以引用其他的仓库，也可以引用自己仓库下不同的分支，这样就可以在当前分支下处理其他分支了，一个重要的应用， 就是把代码发布到 Github Pages 上，不用来回的切换分支了，下面也会着重介绍怎样快速把代码发布到 Github Pages。 下面看 git subtree 的一些基本操作，以下操作为两个不同的仓库，同一仓库不同的分支，可以参考“快速把代码发布到 Github Pages”一节 clone 一个远程仓库 dotfiles 到你本地 $ git clone git@github.com:username/dotfiles.git $ cd dotfiles 增加一个 subtree bash $ git remote add bash git@github.com:username/bash.git # bash 可以理解为远程仓库的别名 $ git subtree add pull -P home/bash bash master --squash # 拉取远程仓库 bash 到本地仓库的home/bash 目录 修改 subtree bash 下代码然后提交到远程 bash 的 master分支 ...... edit home/bash/file...... $ git commit -a -m 'update bash content' $ git subtree push -P home/bash bash master $ git push origin master # 顺便主项目也 push 远程的子项目有更新了，拉下来合并 $ git subtree pull -P home/bash bash master --squash 参考 http://havee.me/linux/2012-07/the-git-advanced-subtree.html http://aoxuis.me/post/2013-08-06-git-subtree https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt 快速把代码发布到 Github Pages 这里要利用到 git subtree 命令来实现。首先我们想一想，如果不借助于 git subtree ，通常做法是怎样来处理的。 我们首先需要创建分支 gh-pages, 然后切换到该分支下，最后把文件提交到 gh-pages 分支中。 对于 master 和 gh-pages 中的内容一样的情况下，这种实现尚且可以，如果不一样，我们就得复制来复制去，很麻烦，还容易出错， 有了 git subtree 后，一切变得是那么简单。下面看具体实现（以 gitbook 的生成为例） 首先需要在本地或 github 中创建分支 gh-pages，如果要发布到 gh-pages 分支与 master 上的内容不同，首先需要删除分支中的内容，执行命令为 git checkout gh-pages //利用命令或手动删除不需要放到 gh-pages 分支中的内容 git add -A git commit -m \"clear gh-pages\" git push （如果远程分支 gh-pages 不存在的话，命令是 git push --set-upstream origin gh-pages） git checkout master 如果分支 gh-pages 已存在，则第一步忽略 把分支 gh-pages 添加到本地 subtree 中，执行该命令前，请确保 _book 文件夹不存在，执行完会提示 “pathspec '_book' did not match any file(s) known to git.”，需要我们创建 _book 目录 git subtree add --prefix=_book origin gh-pages --squash 执行 gitbook build 在目录 _book 中生成 gitbook 文件 执行以下命令，提交修改的文件 git add -A _book git commit -m \"Update gitbook\" push 到远程 gh-pages 分支中 git subtree push --prefix=_book origin gh-pages --squash 如果本地与远程不同步，需要执行 git subtree pull --prefix=_book origin gh-pages --squash 所以建议先 pull 再 push，这样确保本地与远程同步 上面的操作，只是把内容提交到 gh-pages 分支中，而没有把内容提交到 master 分支中，所以需要同时提交到 master 分支中，执行以下命令 git push 下次修改 _book 文件夹下的内容，只需从上面第三步执行即可。 注意：这种方式的副作用是，_book 需要同时也放到 master 分支中。也许有其他命令，不需要把 _book 放到 master 分支中，待考证。 在 mac 系统下，终端（terminal）显示分支等版本信息的设置 方法一： 在 ~/.bash_profile 中添加以下脚本（如果不存在~/.bash_profile则创建，命令为： touch ~/.bash_profile）parse_git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/' } export PS1=\"\\u@\\h \\W\\[\\033[32m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \" 方法二：也是在 ~/.bash_profile 中添加脚本 主要实现有： 显示当前路径 显示当前所在分支 显示当前修改状态 = 表示一个干净的分支 ~ 表示文件有改动 * 表示文件有增加或删除 但未 commit + 表示有新文件 # 表示已commit 但未 push function parse_git_dirty { local git_status=$(git status 2> /dev/null | tail -n1) || $(git status 2> /dev/null | head -n 2 | tail -n1); if [[ \"$git_status\" != \"\" ]]; then local git_now; # 标示 if [[ \"$git_status\" =~ nothing\\ to\\ commit || \"$git_status\" =~ Your\\ branch\\ is\\ up\\-to\\-date\\ with ]]; then git_now=\"=\"; elif [[ \"$git_status\" =~ Changes\\ not\\ staged || \"$git_status\" =~ no\\ changes\\ added ]]; then git_now='~'; elif [[ \"$git_status\" =~ Changes\\ to\\ be\\ committed ]]; then #Changes to be committed git_now='*'; elif [[ \"$git_status\" =~ Untracked\\ files ]]; then git_now=\"+\"; elif [[ \"$git_status\" =~ Your\\ branch\\ is\\ ahead ]]; then git_now=\"#\"; fi echo \"${git_now}\"; fi } function git_branch { ref=$(git symbolic-ref HEAD 2> /dev/null) || return; echo \"(\"${ref#refs/heads/}\") \"; } export PS1=\"[\\[\\033[1;32m\\]\\w\\[\\033[0m\\]] \\[\\033[0m\\]\\[\\033[1;36m\\]\\$(git_branch)\\[\\033[0;31m\\]\\$(parse_git_dirty)\\[\\033[0m\\]$ \" 方法三： 推荐使用强大的 zsh https://github.com/robbyrussell/oh-my-zsh 比较好的主题 robbyrussell 官方默认的 blinks 每次执行命令时，背景高亮显示 ys 可以显示时间 pygmalion 样式风格不错 Github Github 相关资料 Github Developer Gitignore 各种语言忽略文件说明 GitHub中如何更新已经fork的代码 github上有个很方便的功能叫fork，将别人的工程一键复制到自己账号下。当被 fork 的资源有更新时，我们需要手动更新，请按下面步骤操作 下载 fork 后的资源到本地git clone git@github.com:username/repository.git 增加源分支地址到你项目远程分支列表中(此处是关键)，需要将原来的仓库指定为 upstream，命令如下 git remote add upstream git@github.com/被fork的仓库.git fetch源分支的新版本到本地 git fetch upstream 在 fetch 前也可以执行命令来查看远程分支列表 git remote -v 或 git branch -a 合并两个版本的代码 git merge upstream/master # 或者其他分支 如果本地有修改过的内容，合并的过程可能有冲突，根据提示修改冲突的文件，重新提交到本地即可。 如果想合并 tag 比如 v4.8.3 可以先执行 git checkout v4.8.3 git checkout -b v4.8.3 git merge v4.8.3 将合并后的代码push到 github 上去 git push 如果嫌麻烦或是本地代码没有修改，也可以直接先删除以前 fork 的资源，然后再重新 fork 一个即可。另外 fork 下来的资源如果有修改，最好新创建一个分支 另外如果想使用被 fork 资源的某一分支或某一 tag，比如想修改被 fork 的资源某一稳定版本，并重新修改名称发布到 npm 上，可按照以下方式处理 切换到某一 branch 或 taggit checkout -b branch_name tag_name 修改代码 npm publish 或者使用 github desktop 界面操作更简洁 https://www.cnblogs.com/mff520mff/archive/2017/08/13/7355118.html http 或 https 保存当前密码设置 git config --global credential.helper store pre-commit 的使用 pre-commit 是用来执行 git commit 之前处理的脚本，可以直接修改 .git/hooks 下的文件 pre-commit.sample 改成 pre-commit，然后修改文件中的 shell 脚本 参见 http://ju.outofmemory.cn/entry/255503 也可以安装 npm 包 pre-commit 来处理 学习参考 git 官网 中文文档 版本控制入门 – 搬进 Github 上面视频对应电子书 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2019-05-31 14:35:55 "},"tools/atom.html":{"url":"tools/atom.html","title":"Atom 编辑器使用教程","keywords":"","body":"Atom 常用快捷键 Window 系统为 Ctrl(Command)，Mac 系统为 Command 英文 中文 快捷键 功能 New Window 新建界面窗口 Ctrl(Command) + Shift + N 如中文意思 New File 新建文件 Ctrl(Command) + N 如中文意思 Open File 打开文件 Ctrl(Command) + O 如中文意思 Open Folder 打开文件夹 Ctrl(Command) + Shift + O 如中文意思 Add Project Folder 加载项目目录 Ctrl(Command) + Alt + O 如中文意思 Reopen Last Item 重新加载上次项目 Ctrl(Command) + Shift + T 如中文意思 Save 保存文件 Ctrl(Command) + S 如中文意思 Save As 另存为 Ctrl(Command) + Shift +S 如中文意思 Close Tab 关闭当前编辑文档 Ctrl(Command) + W 如中文意思 Close Window 关闭编辑器 Ctrl(Command) + Shift + W 如中文意思 Undo 撤销 Ctrl(Command) + Z 如中文意思 Redo 重做 Ctrl(Command) + Y 如中文意思 Copy 复制 Ctrl(Command) + Insert 如中文意思 Copy Path 复制文档路径 Ctrl(Command) + Shift + C 如中文意思 Paste 粘贴 Shift + Insert 如中文意思 Select All 全选 Ctrl(Command) + A 如中文意思 Select Encoding 选择编码 Ctrl(Command) + Shift +U 就是设置文件的编码 Go to Line 跳转到某行 Ctrl(Command) + G 支持行列搜索,Row:Column Slect Grammar 语法选择 Ctrl(Command) + Shift + L 和Sublime的Syntax设置功能一样 Reload 重载 Ctrl(Command)+ Alt +R 重新载入当前编辑的文档 Toggle Full Screen 全屏 F11 如中文意思 Increase Font Size 增大字体 Ctrl(Command) + Shift + “+” Sublime的Ctrl(Command) + 也能生效 Decrease Font Size 减小字体 Ctrl(Command) + Shift + “-“ Sublime的Ctrl(Command) - 也能生效 Toggle Tree View 展示隐藏目录树 Ctrl(Command) + B Sublime的Ctrl(Command)+K,+B这里也可以生效 Toggle Commadn palette 全局搜索面板 Ctrl(Command) + Shift + P 和Sublime的大同小异 Select Line 选定一行 Ctrl(Command) + L 如中文意思 Select First Character of Line 选定光标至行首 Shift + Home 如中文意思 Slect End of Line 选定光标至行尾 Shift + End 如中文意思 Select to Top 选定光标处至文档首行 Ctrl(Command) + Shift + Home 就是光标处作为分割线,取文档上部分 Select to Bottom 选定光标处至文档尾行 Ctrl(Command) + Shfit + End 就是光标处作为分割线,取文档下部分 Find in Buffer 从缓存器搜索 Ctrl(Command) + F 与Sublime一致 Replace in Buffer 高级替换 Ctrl(Command) + Shift + F 与Sublime一致 Select Next 匹配选定下一个 Ctrl(Command) + D 和Sublime一模一样有木有 Select All 匹配选定所有 Alt + F3 和Sublime一模一样有木有 Find File 查询文件,选定打开 Ctrl(Command) + P 与Sublime不一样 Delte End of Word 删除光标处至词尾 Ctrl(Command) + Del 如中文意思 Duplicate Line 复制当前行 Ctrl(Command) + Shift + D 如中文意思 Delete Line 删除一行 Ctrl(Command) + Shift + K 如中文意思 Toggle Comment 启用注释 Ctrl(Command) + / 与Sublime一致 Toggle developer tools 打开Chrome调试器 Ctrl(Command) + Alt + I 神奇啊 Indent 增加缩进 Ctrl(Command) + [ 向右缩进 Outdent 减少缩进 Ctrl(Command) + ] 向左缩进 Move Line Up 行向上移动 Ctrl(Command) + up 如字面意思 Move Line Down 行向下移动 Ctrl(Command) + Down 如字面意思 Join Lines 行链接 Ctrl(Command) + J 追加 newline-below 光标之下增加一行 Ctrl(Command) + Enter 与sublime 一致 editor:newline-above 光标之上增加一行 Ctrl(Command) + Shift + Enter 与sublime 一致 pane:show-next-item 切换编辑的标签页 Ctrl(Command) + Tab 如中文意思 Fuzzy Finder 文件跳转面板 Ctrl(Command) + T 如字面意思 Select Line Move above 选中行上移 Ctrl(Command) + up 如中文意思 Select Line Move below 选中行下移 Ctrl(Command) + down 如中文意思 Symbol-view 进入变量、函数跳转面板。 Ctrl(Command) + R 如中文意思 参考资料 Atom 使用教程 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-01-18 10:38:09 "},"tools/markdown.html":{"url":"tools/markdown.html","title":"Markdown 使用帮助","keywords":"","body":"Markdown 使用帮助 Markdown 基本语法 Markdown 高级语法 语法高亮格式 Markdown 编辑器 Cmd Markdown 编辑阅读器 - 作业部落出品 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"tools/switchHosts.html":{"url":"tools/switchHosts.html","title":"SwitchHosts 切换 host","keywords":"","body":"SwitchHosts 切换 host 插件 http://oldj.net/article/switchhosts-v3/ https://oldj.github.io/SwitchHosts/ Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"tools/mac.html":{"url":"tools/mac.html","title":"Mac 学习笔记","keywords":"","body":"mac 学习笔记 知识点整理 启动80端口必须用 sudo 权限 mac 相关命令 cat 查看文件内容，比如查看 host 内容 cat /etc/hosts which 定位命令所对应的路径，比如 which node 查看占用的端口 sudo lsof -i -P | grep -i \"listen\" 也可以用这个命令 sudo ps -ef |grep [关键字] 杀死进程 sudo kill -9 17967 8900 表示对应的 PID 解压 tar.xz结尾的压缩文件 xz -d name.tar.xz tar -xvf name.tar 设置环境变量 path 路径 方法1： export PATH=/usr/local/xxx/bin:$PATH echo $PATH >> ~/.bash_profile 如果只是临时的可以不需要下面这段 echo $PATH >> ~/.bash_profile 方法2：编辑文件 ~/.bash_profile，添加要加入的path，重启终端。 学习参考 深入浅出 Mac OSX 中文教程 node 设置 export PATH=/Users/wangyanjun/development-tools/mongodb-osx-x86_64-3.2.8/bin:$PATHecho $PATH >> ~/.bash_profile linux 系统下安装 rz 命令 yum -y install lrzsz ，使用 yum -y install 可以安装其他命令 安装后 zsh oh-my-zsh 后，一些命令找不到解决方法，比如 nvm， 在 .zshrc 中加入如下设置 export NVM_DIR=~/.nvm source $(brew --prefix nvm)/nvm.sh oh-my-zsh 主题： ls ~/.oh-my-zsh/themes 修改主题，在 .zshrc 中修改 ZSH_THEME=\"robbyrussell\" 即可 oh-my-zsh 插件： ls ~/.oh-my-zsh/plugins 修改插件，在 .zshrc 中修改 plugins=(git github gulp nvm npm node brew cp) 即可 tail 命令 tail -50f filename 表示查看后 50行内容 tail filename |grep \"搜索的内容\" -a(或-b 或-c) -a 表示从前查找，-b 从后查找 -c 表示从前后查找 chmod 命令 chmod -R 777 file -R 表示递归设置，777 表示最高权限，file 指文件或文件夹 curl 命令 检测 url 是否能访问通 curl url dig Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-01-18 10:35:29 "},"tools/codelint.html":{"url":"tools/codelint.html","title":"规范化代码风格插件","keywords":"","body":"规范化代码风格插件 editorconfig 官网 各种语言例子参考 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2017-08-04 14:17:49 "},"tools/WebStorm.html":{"url":"tools/WebStorm.html","title":"WebStorm","keywords":"","body":"WebStorm 操作指南 解决在 mac 系统下 IntelliJ IDEA、 WebStorm 等系列文件无法输入中文的 bug 首先确保 java 版本为 1.8.0_45，可以用命令 java --version 来查看 jdk 8U45 下载地址为： http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html#jdk-8u45-oth-JPR 无法下载的话，可以从中文网下载 http://z.download.csdn.net/download/tan3739/8822145 jdk 卸载方法请看这里 http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html#uninstall 安装好 jdk 8U45 后在终端执行以下命令，首先备份WebStorm 下自带的 jdk，然后 ln 安装的 jdk$ /Applications/WebStorm.app/Contents/jre $ mv jdk jdk.backup $ ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk jdk 重启 WebStorm，搞定，其他 IntelliJ IDEA 等也是如此 字体渲染问题 在/Applications/WebStorm.app/Contents/bin/webstorm.vmoptions 最后添加以下代码-Dawt.useSystemAAFontSettings=gasp -Dswing.aatext=true -Dsun.java2d.xrender=true 有时会卡顿 设置最大内存，打开 /Applications/Webstorm.app/Contents/bin/webstorm.vmoptions，-Xmx750m 修改为 -Xmx2048m 或者更大的值 减少不必要的文件索引，如构建输出文件夹等：设置 Preferences -> Directories 点击不需要索引的目录，然后点击 EXcluded，更多细节参见官方文档 参考文章 https://csspod.com/webstorm-tips-on-mac/ 主题设置 colors 存放地址 ~/Library/Preferences/WebStorm2016.1/colors https://github.com/jkaving/intellij-colors-solarized https://github.com/rofrol/oceanic-next-jetbrains-theme https://github.com/jumbojett/WebStorm-Verou-Theme 去掉保存文件时自动在行尾加上一空行 Preferences - Editor - General - Other 去掉 \"Ensure line feed at file on Save\" 勾选 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-01-19 10:36:44 "},"tools/node.html":{"url":"tools/node.html","title":"node 学习笔记","keywords":"","body":"node 如果不考虑版本的问题，需要定期升级 node 的话，考虑从官方安装，然后设置其环境变量，这样每次升级后，不用重新安装全局 npm 模块 官方下载的安装包，默认安装路径为 /usr/local/bin/node 和 /usr/local/bin/npm 。 安装全局包路径： /usr/local/lib/node_modules/ 如果考虑版本的切换，可以使用 nvm 来安装和管理各版本 npm 常见命令 npm ls -g --depth=0 查询深度为0的全局列表 npm update -g npm 升级 npm npm ls -g --depth=1 2>/dev/null | grep generator- 查询深度为1的全局 npm 包， > 表示重定向，1 标准输出，2 标准输出错误信息，2>/dev/null 表示把错误信息重定向到 null 设备中，即不输出。| 表示通道，把上一个命令的输出内容作为下一个命令的输入内容，grep generator- 检索 generator- 开头的信息 npm link 把当前 npm 工程 link 到 npm module 全局中，主要供开发时使用，与之对应的取消 link 命令为 npm unlink 设置镜像 1.原npm地址 npm config set registry http://registry.npmjs.org 2.设置国内镜像 a.通过config命令 npm config set registry https://registry.npm.taobao.org b.命令行指定 npm --registry https://registry.npm.taobao.org install xxx c.编辑 ~/.npmrc 加入下面内容 registry = https://registry.npm.taobao.org Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-03-05 17:00:15 "},"future/":{"url":"future/","title":"前端未来","keywords":"","body":"js 新的 API 提取图片中的文字、人脸或者条形码 —— 形状检测API 前端视野 2018年 JavaScript 明星项目 Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2019-02-14 16:01:43 "},"javascript/knowledge/":{"url":"javascript/knowledge/","title":"知识点","keywords":"","body":"Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-03-09 08:41:12 "},"javascript/knowledge/sendBeacon.html":{"url":"javascript/knowledge/sendBeacon.html","title":"sendBeacon 无阻塞发送数据","keywords":"","body":"window.navigator.sendBeacon 无阻塞发送数据 基本用法 浏览器引入的sendBeacon方法，发出的是异步请求，但是请求是作为浏览器任务执行的，与当前页面是脱钩的。因此该方法不会阻塞页面卸载流程和延迟后面页面的加载。 navigator.sendBeacon(url, data); url 就是上报地址，data 可以是 ArrayBufferView，Blob，DOMString 或 Formdata，根据官方规范，需要 request header 为 CORS-safelisted-request-header，在这里则需要保证 Content-Type 为以下三种之一： application/x-www-form-urlencoded multipart/form-data text/plain 我们一般会用到 DOMString , Blob 和 Formdata 这三种对象作为数据发送到后端，下面以这三种方式为例进行说明。 // 1. DOMString类型，该请求会自动设置请求头的 Content-Type 为 text/plain const reportData = (url, data) => { navigator.sendBeacon(url, data); }; // 2. 如果用 Blob 发送数据，这时需要我们手动设置 Blob 的 MIME type， // 一般设置为 application/x-www-form-urlencoded。 const reportData = (url, data) => { const blob = new Blob([JSON.stringify(data), { type: 'application/x-www-form-urlencoded', }]); navigator.sendBeacon(url, blob); }; // 3. 发送的是Formdata类型， // 此时该请求会自动设置请求头的 Content-Type 为 multipart/form-data。 var data = { name: '前端名狮子' , age: 20 }; const reportData = (url, data) => { const formData = new FormData(); Object.keys(data).forEach((key) => { let value = data[key]; if (typeof value !== 'string') { // formData只能append string 或 Blob value = JSON.stringify(value); } formData.append(key, value); }); navigator.sendBeacon(url, formData); }; sendBeacon 如果成功进入浏览器的发送队列后，会返回true；如果受到队列总数、数据大小的限制后，会返回false。返回ture后，只是表示进入了发送队列，浏览器会尽力保证发送成功，但是否成功了，无法判断。 发送数据大小限制 目前没有给出具体的发送数据大小限制标准，不过有人做了下面的测试，当数据长度是65536时，异步请求进入浏览器发送队列失败，表明数据大小是有限制，不同的浏览器应该有所差别。 var url = 'http://jsfiddle.net?sendbeacon'; var n = 65536; // sendBeacon limit for Chrome v40 on Windows (2^16) var data = new Array(n+1).join('X'); // generate string of length n if(!navigator.sendBeacon(url, data)) { alert('data limit reached'); } 业务场景 当用户关闭浏览器、刷新浏览器或者跳转其他页面时，向服务器发送一些统计数据。 常规方案-直接发送 xhr 请求 我们会优先想到监听页面的unload或者beforeunload事件，在事件回调里使用XMLHttpRequest发送异步请求。 但是由于是xhr请求是异步发送，很可能在它即将发送的时候，页面已经卸载了，从而导致发送取消或者发送失败。异步请求响应返回后，由于页面和相关资源已经卸载，会引起function not found的错误。 解决方法就是 AJAX 通信改成同步发送，即只有发送完成，页面才能卸载。 const syncReport = (url, { data = {}, headers = {} } = {}) => { const xhr = new XMLHttpRequest(); xhr.open('POST', url, false); xhr.withCredentials = true; Object.keys(headers).forEach((key) => { xhr.setRequestHeader(key, headers[key]); }); xhr.send(JSON.stringify(data)); }; 将xhr请求改为同步，虽然能够完成发送数据，但存在以下两个问题： 部分浏览器已经不支持同步的 XMLHttpRequest 对象了（即open()方法的第三个参数为false）； xhr请求改为同步后，会阻塞页面的卸载和跳转，导致下一个页面导航加载的时机变晚，用户体验较差。 动态图片 通过在unload事件处理器中，创建一个图片元素并设置它的 src 属性的方法来延迟卸载以保证数据的发送。因为绝大多数浏览器会延迟卸载以保证图片的载入，所以数据可以在卸载事件中发送。 const reportData = (url, data) => { let img = document.createElement('img'); const params = []; Object.keys(data).forEach((key) => { params.push(`${key}=${encodeURIComponent(data[key])}`); }); img.onload = () => img = null; img.src = `${url}?${params.join('&')}`; }; 这种方法存在同样的问题，页面卸载流程被阻塞，后面页面的加载时机被延迟，用户体验不好 通过使用 sendBeacon来发送，上面已提到 总结 这里是重点 兼容性问题的处理，降级使用 ajax 方案 在 IOS 微信中有 navigator.sendBeacon 存在且能拿到返回值为 true，但是请求并未发送出去，待验证 https://developers.weixin.qq.com/community/develop/doc/0008e283360b0878715856f6353400 除了在关闭页面、隐藏页面使用 navigator.sendBeacon，是否正常的发送也优先使用这个方法，待验证 该方法是支持跨域的，包括：Access-Control-Allow-Credentials、Access-Control-Allow-Origin 和 Access-Control-Allow-Headers 注意 Content-Type要跟后端保持一致，否则无法发送const blob = new Blob([JSON.stringify(data)], { type: 'application/x-www-form-urlencoded;charset=utf-8' }); const result = window.navigator.sendBeacon(url, blob); 发送大小的验证 发出的请求，是放到的浏览器任务队列执行的，脱离了当前页面，所以不会阻塞当前页面的卸载和后面页面的加载过程，用户体验较好 移动端不支持事件 beforeunload，请使用 pagehide 关于 visibilityState、pagehide 参看这里 http://www.ruanyifeng.com/blog/2018/10/page_visibility_api.html http://www.ruanyifeng.com/blog/2018/11/page_lifecycle_api.html https://www.cnblogs.com/sunshq/p/10286283.html https://blog.csdn.net/zhangchb/article/details/78205110 参考文章 https://blog.csdn.net/u012193330/article/details/102778979 https://w3c.github.io/beacon/#sec-sendBeacon-method https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon Copyright © 2016-2017 all right reserved，powered by Gitbook最后修改时间： 2020-03-09 11:32:20 "}}